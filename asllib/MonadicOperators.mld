{0
         Monadic operators 
}

{1 Disclaimer}
This material covers both ASLv0 (viz, the existing ASL pseudocode language 
which appears in the Arm Architecture Reference Manual) and ASLv1, a new,
experimental, and as yet unreleased version of ASL.

This material is work in progress, more precisely at pre-Alpha quality as 
per Arm’s quality standards. In particular, this means that it would be
premature to base any production tool development on this material.

However, any feedback, question, query and feature request would be most 
welcome; those can be sent to Arm’s Architecture Formal Team Lead Jade
Alglave <jade.alglave@arm.com> or by raising issues or PRs to the herdtools7
github repository.

{1 Basic Semantics Bricks}

The basic bricks of the semantics are monadic operators, viz:
  + returns [return_<continuation>];
  + binds [bind_<composition>];
  + product [prod_par];
  + application [appl_data].

{2
Return
}

Each return_<continuation> function performs a specific continuation, as
follows.
  {3 Normal}
  [return_normal] <description, minimal example>

  {3 Continue}
  [return_continue] <description, minimal example>

  {3 Return}
  [return_return] <description, minimal example>

{2
Bind
}

Each bind_<composition> function performs a specific
composition, as follows.

  {3 Sequential}
  [bind_seq], also written [let*|], denotes the program order,
  as given by [;] in the ASL code.  <minimal example>

  {3 Data}
  [bind_data], also written [let*] and [>>=] hands over the
data of its first argument to its second argument. Graphically,
it creates an Intrinsic Data Dependency between the Effects
generated by it first argument and the Effects generated by its
result.  <minimal example>

  {3 Control}
  [bind_ctrl] creates an Intrinsic Control Dependency between
the Effects generates by its first argument and the Effects
generated by its results.  <minimal example>

  {3 Choice}
  [bind_choice_m] and [bind_choice] make a choice between
different values

  {3 Exception}
  [bind_exception] (and its specific instances
[bind_exception_seq] also written [let**|],
[bind_exception_data] also written [let**],
[bind_exception_ctrl]), creates an Intrinsic Dependency as
mandated by its [_composition] binder, and throws an exception
when necessary.  <minimal example>

  {3 Continue}
  [bind_continue m f], also written [let*>], executes [f] on
[m] only if [m] is [Normal (Continuing _)] <minimal example>

  {3 Unroll}
  [bind_unroll "while" m f] executes [f] on [m] after having
ticked the unrolling stack of [m] only if [m] is [Normal
(Continuing _)] <minimal example>

{2
Product
}

[prod_par], also written [and*], ensures that evaluation is
done in parallel <minimal example>


{2
Application
}

Application, viz,  [appl_data], also written [>=>], ensures that evaluation
follows function application <minimal example>
