{0
          ASL Semantics Reference
}

{1
Monadic operators
}

The basic bricks of the semantics are monadic operators, viz:
  + returns [return_<continuation>];
  + binds [bind_<composition>];
  + product [prod_par];
  + application [appl_data].

{2
Return
}

Each return_<continuation> function performs a specific continuation, as
follows.
  {3 Normal}
  [return_normal] <description, minimal example>

  {3 Continue}
  [return_continue] <description, minimal example>

  {3 Return}
  [return_return] <description, minimal example>

{2
Bind
}

Each bind_<composition> function performs a specific
composition, as follows.

  {3 Sequential}
  [bind_seq], also written [let*|], denotes the program order,
  as given by [;] in the ASL code.  <minimal example>

  {3 Data}
  [bind_data], also written [let*] and [>>=] hands over the
data of its first argument to its second argument. Graphically,
it creates an Intrinsic Data Dependency between the Effects
generated by it first argument and the Effects generated by its
result.  <minimal example>

  {3 Control}
  [bind_ctrl] creates an Intrinsic Control Dependency between
the Effects generates by its first argument and the Effects
generated by its results.  <minimal example>

  {3 Choice}
  [bind_choice_m] and [bind_choice] make a choice between
different values

  {3 Exception}
  [bind_exception] (and its specific instances
[bind_exception_seq] also written [let**|],
[bind_exception_data] also written [let**],
[bind_exception_ctrl]), creates an Intrinsic Dependency as
mandated by its [_composition] binder, and throws an exception
when necessary.  <minimal example>

  {3 Continue}
  [bind_continue m f], also written [let*>], executes [f] on
[m] only if [m] is [Normal (Continuing _)] <minimal example>

  {3 Unroll}
  [bind_unroll "while" m f] executes [f] on [m] after having
ticked the unrolling stack of [m] only if [m] is [Normal
(Continuing _)] <minimal example>

  {3 Thrown}
  [bind_thrown] and [bind_explicit_thrown] handle [throw]
statements <minimal example>

{2
Product
}

[prod_par], also written [and*], ensures that evaluation is
done in parallel <minimal example>


{2
Application
}

Application, viz,  [appl_data], also written [>=>], ensures that evaluation
follows function application <minimal example>


{1
Environments
}

An environment is what the semantics operates over: a structure
which amongst other things associates values to variables.
Intuitively, the evaluation of a program makes an initial
environment evolve, with new values as given by the operations
of the program.

  {2 Base Value}
  [base_value] <description, minimal example>

  {2 Initial environment}
  The initial environment is built with the help of the [build_<object>]
  functions.  Each [build_<object>] function builds a specific object, as
  follows.

    {3 Function Calls}
    [build_func_call_ref] <description, minimal example>

    {3 Global Storage}
    [build_global_storage] <description, minimal example>

    {3 Global Environment}
    [build_global_env] <description, minimal example>

    {3 Bind Environment}
    [bind_env], also written [let*^], <description, minimal example>

  {2 Scopes}
  [push_scope] pushes a new scope on the declaration stack. Variables declared
  here will be stored until the corresponding [pop_scope].

  [pop_scope old new] restores the variable bindings of [old], with the updated
  values of [new].

{1
Evaluation
}
Evaluating a program is evaluating its main function.
Constructively, evaluating a program requires following its
Abstract Syntax Tree and evaluating each of its components.

Formally, the semantics of a program are given by applying a
set of eval_<object> functions. Each eval_<object> function
describes how to evaluate a specific object, as follows.

      + [eval_expr] evaluates expressions: it takes an
environment and an expression and returns a wrapped value and a
new environment <minimal example>
      + [eval_expr_sef] evaluates expressions without side
effects <description, minimal example>
      + [eval_expr_list] and [eval_expr_list_m] evaluate lists
of expressions <description, minimal example>
      + [eval_slices] evaluates slices <description, minimal
example>
      + [eval_patterns] evaluates patterns <description,
minimal example>
      + [eval_local_decl] evaluates local declarations
<description, minimal example>
      + [eval_lexpr] evaluates left-hand sides of assignments:
it takes an environment, the left-hand side of an assignment
and a wrapped value to be written, and returns a wrapped
environment updated with the new value.  <description, minimal
example>
      + [eval_stmt] evaluates statements: it takes an
environment and a statement and returns a wrapped new
environment, viz, the environment updated with the side-effects
of the statement. <minimal example>
      + [eval_block] evaluates blocks <description, minimal
example>
      + [eval_loop] evaluates both while and repeat loops
<description, minimal example>
      + [eval_for] evaluates for loops <description, minimal
example>
      + [eval_catchers] evaluates catchers <description,
minimal example>
      + [eval_call] evaluates functions calls <description,
minimal example>
      + [eval_func] evaluates functions: it takes an
environment, a function name and its arguments, and returns a
wrapped list of the return values of the function. The
evaluation of a program is the evaluation of its main function.
<minimal example>

{2
Evaluation of Expressions
}

[eval_expr] specifies how to evaluate an expression [e] in an
environment [env]. More precisely, [eval_expr env e] is the
monadic evaluation  of [e] in [env].

Evaluation of the expression [e] under an environment [env] is either a value
[v] or an error and one of the following applies:

{3 Rule.Lit}

  {4 Rule}
  [e] denotes a Literal [l] and [v] is the value of [l] in [env].

  {4 Example}
  <minimal example>

{3 Rule.IgnoreTypedExpr}

  {4 Rule}
  [(e,_t)] denotes a typed expression and <description>

  {4 Example}
  <minimal example>

{3 Rule.ELocalVar}

  {4 Rule}
  All of the following applies:
  - [e] denotes a variable [x] which is bound locally in [env];
  - [v] is the value of [x] in [env].

  {4 Example}
  <minimal example>

{3 Rule.EGlobalVar}
  {4 Rule}
  All of the following applies:
  - [e] denotes a variable [x] which is bound globally in [env];
  - [v] is the value of [x] in [env].

  {4 Example}
  <minimal example>

{3 Rule.EUndefIdent}

  {4 Rule}
  All of the following applies:
  - [e] denotes a variable [x] which is not bound in [env];
  - an Error "UndefinedIdentifier" is raised.

  {4 Example}
  <minimal example>

{3 Rule.Binop}

  {4 Rule}
  All of the following applies:
  - [e] denotes a Binary Operator [op] over two expressions [e1] and [e2];
  - The evaluation of the expression [e1] under [env] is [v1];
  - The evaluation of the expression [e2] under [env] is [v2];
  - [v] is the result of applying the Binary Operator [op] to [v1] and [v2].

  {4 Example}
  <minimal example>

{3 Rule.Unop}

  {4 Rule}
  All of the following applies:
  - [e] denotes a Unary Operator [op] over an expression [e];
  - The evaluation of the expression [e] under [env] is [t];
  - [v] is the result of applying the Unary Operator [op] to [t].

  {4 Example}
  <minimal example>

{3 Rule.ECondSimple}

  {4 Rule}
  All of the following applies:
  - [e] denotes a condition [econd] with two options [e1] and [e2];
  - The evaluation of the condition [econd] under [env] is mcond;
  - Both [e1] and [e2] are simple expressions; EUndefIdent
  - The evaluation of [e1] or [e2], depending on [mcond], is [v].

  {4 Example}
  <minimal example>

{3 Rule.ECond}

  {4 Rule}
  All of the following applies:
  - [e] denotes a condition [e_cond] with two options [e1] and [e2];
  - The evaluation of the condition [e_cond] under [env] is [m_cond];
  - One of [e1] or [e2] is not a simple expression;
  - The evaluation of [e1] or [e2], depending on [m_cond], is [v].

  {4 Example}
  <minimal example>

{3 Rule.ESlice}

  {4 Rule}
  All of the following applies:
  - [e] denotes an expression [e_bv] sliced as per [slices];
  - The evaluation of [e_bv] under [env] is [v_bv];
  - The evaluation of [slices] under [env] is [positions];
  - [v] is the value read in [v_bv] from [positions].

  {4 Example}
  <minimal example>

{3 Rule.ECall}

  {4 Rule}
  All of the following applies:
  - [e] denotes a function call [(name, actual_args, params)];
  - The evaluation of that function call under [env] is [ms];
  - [v] is the value read from [ms].

  {4 Example}
  <minimal example>

{3 Rule.EGetArray}

  {4 Rule}
  All of the following applies:
  - [e] denotes an array [e_array] and an index [e_index];
  - The evaluation of [e_array] under [env] is [v_array];
  - The evaluation of [e_index] under [env] is [v_index];
  - [v] is the value found at the index [v_index] of [v_array].

  {4 Example}
  <minimal example>

{3 Rule.ERecord}

  {4 Rule}
  All of the following applies:
  - [e] denotes a series of field names [names] and associated expressions
    [fields];
  - [fields] evaluates in [env] to [v_fields];
  - [v] is the record built by associating the names [names] to [v_fields].

  {4 Example}
  <minimal example>

{3 Rule.EGetField}

  {4 Rule}
  All of the following applies:
  - [e] denotes a field name [field_name] in a vector [e_vec];
  - the evaluation of [e_vec] in [env] is [v_vec];
  - [v] is the value mapped by [field_name] in [v_vec].

  {4 Example}
  <minimal example>

{3 Rule.EGetFields}
<description>

<minimal example>

{3 Rule.EConcat}

  {4 Rule}
  All of the following applies:
  - [e] denotes a list of expressions [e_list];
  - the evaluation of [e_list] in [env] is [v_list];
  - [v] is the concatenation of [v_list].

  {4 Example}
  <minimal example>

{3 Rule.ETuple}

  {4 Rule}
  All of the following applies:
  - [e] denotes a list of expression [e_list];
  - the evaluation of [e_list] in [env] is [v_list];
  - [v] is the vector built from [v_list].

  {4 Example}
  <minimal example>

{3 Rule.EUnknown}

  {4 Rule}
  All of the following applies:
  - [e] denotes a type [t];
  - [v] is a value in the domain of [t].

  {4 Example}
  <minimal example>

{3 Rule.EPattern}

  {4 Rule}
  All of the following applies:
  - [e] denotes a pattern [e,p];
  - [v] is the boolean determining whether the evaluation of [e] in [env]
    matches [p].

  {4 Example}
  <minimal example>

{2
Evaluation of Side-Effect-Free Expressions
}

  {3 Rule}
   [eval_expr_sef] specifies how to evaluate a side-effect-free expression [e]
   in an environment [env]. More precisely, [eval_expr_sef env e] is [eval_expr
   env e], if e is side-effect-free.

  {3 Example}
  <minimal example>

{2
Evaluation of Left-Hand-Side Expressions
}
[eval_lexpr version env le m] is [env[le --> m]].

The evaluation of the left-hand-side expression [le] associated with a value
[v] under an environment [env] is either [new_env] or an error is raised and
one of the following applies:

  {3 Rule.LEIgnore}

    {4 Rule}
    All of the following applies:
    - [le] can be ignored;
    - [new_env] is [env].

  {4 Example}
  <minimal example>

  {3 Rule.LELocalVar}

    {4 Rule}
    All of the following applies:
    - [le] denotes a variable [x];
    - [x] is locally bound in [env];
    - [new_env] is [env] where [x] has been assigned the value [v].

    {4 Example}
    <minimal example>

  {3 Rule.LEGlobalVar}

    {4 Rule}
    All of the following applies:
    - [le] denotes a variable [x];
    - [x] is globally bound in [env];
    - [new_env] is [env] where [x] has been assigned the value [v].

    {4 Example}
    <minimal example>

  {3 Rule.LEUndefIdentV1}

    {4 Rule}
    All of the following applies:
    - [le] denotes a variable [x] which is not bound in [env];
    - the ASL language version is V1;
    - an Error "UndefinedIdentifier" is raised.

    {4 Example}
    <minimal example>

  {3 Rule.LEUndefIdentV0}

    {4 Rule}
    All of the following applies:
    - [le] denotes a variable [x] which is not bound in [env];
    - the ASL language version is V0;
    - [new_env] is [env] where [x] has been declared a local identifier bound to
    the value [v].

    {4 Example}
    <minimal example>

  {3 Rule.LESlice}

    {4 Rule}
    All of the following applies:
    - [le] denotes a left-hand-side expression sliced as per [slices];
    - The right-hand-side expression corresponding to [le] is [e_bv];
    - The evaluation of [re_bv] under [env] is [rv_bv];
    - The evaluation of [slices] under [env] is [positions];
    - [v] is [rv_bv] where the positions [positions] have been updated to [v]
    - [new_env] is [env] where [le] has been assigned the value [v].

    {4 Example}
    <minimal example>

  {3 Rule.LESetArray}

    {4 Rule}
    All of the following applies:
    - [le] denotes an array [le_array] and an index [e_index];
    - The right-hand-side expression corresponding to [le_array] is [re_array];
    - The evaluation of [re_array] under [env] is [rv_array];
    - The evaluation of [e_index] under [env] is [v_index];
    - [new_v_array] is [rv_array] where the value at index [v_index] has been
      updated to [v];
    - [new_env] is [env] where [le_array] has been assigned the value
      [new_v_array].

    {4 Example}
    <minimal example>

  {3 Rule.LESetField}

    {4 Rule}
    All of the following applies:
    - [le] denotes a field name [field_name] in a record [le_record];
    - The right-hand-side expression corresponding to [le_record] is
      [re_record];
    - The evaluation of [re_record] under [env] is [rv_record];
    - [new_v_record] is [rv_record] where the field [field_name] has been
      updated to [v];
    - [new_env] is [env] where [le_record] has been assigned the value
      [new_v_record].

    {4 Example}
    <minimal example>

  {3 Rule.LESetFields}

    {4 Rule}
    <description>

    {4 Example}
    <minimal example>

  {3 Rule.LETuple}

    {4 Rule}
    All of the following applies:
    - [le] denotes a list of left-hand-side expressions [le_list];
    - [new_env] is [env] where each left-hand-side expression in [le_list] has
      been assigned the value at the corresponding index in [v].

    {4 Example}
    <minimal example>

{2
Evaluation of Expression Lists
}
<description>
<minimal example>

{2
Evaluation of Slices
}
[eval_slices env slices] is the list of pair [(i_n, l_n)] that corresponds to
the start (included) and the length of each slice in [slices].
<minimal example>

{2
Evaluation of Patterns
}
[eval_pattern env pos v p] determines if [v] matches the pattern [p].
Formally, one of the following applies:

  {3 Rule.PAll}

    {4 Rule}
    [p] is the pattern which matches everything.

    {4 Example}
    <minimal example>

  {3 Rule.PAny}

    {4 Rule}
    All of the following applies:
    - [p] gives a list of patterns [li_patterns];
    - [v] is a record of values [li_values];
    - each value in [li_values] matches the corresponding pattern in
      [li_patterns] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PGeq}

    {4 Rule}
    All of the following applies:
    - [p] gives a side-effect-free expression [e];
    - [v] is greater than or equal to the evaluation of [e] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PLeq}

    {4 Rule}
    All of the following applies:
    - [p] gives a side-effect-free expression [e];
    - [v] is lesser than or equal to the evaluation of [e] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PNot}

    {4 Rule}
    All of the following applies:
    - [p] gives a pattern [p'];
    - [v] matches the negation of [p'] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PRange}

    {4 Rule}
    All of the following applies:
    - [p] gives two side-effect-free expressions [e1] and [e2];
    - [v] is greater than or equal to [e1] in [env];
    - [v] is lesser than or equal to [e2] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PSingle}

    {4 Rule}
    All of the following appplies:
    - [p] gives a side-effect-free expression [e];
    - [v] is equal to the evaluation of [e] in [env].

    {4 Example}
    <minimal example>

  {3 Rule.PMask}

    {4 Rule}
    All the following applies:
    - [p] gives a mask [m]
    - [v] is a bitvector that matches the mask [m]

    {4 Example}
    <minimal example>

  {3 Rule.PTuple}

    {4 Rule}
    All of the following applies:
    - [p] gives a list of patterns [li];
    - [v] matches the evaluation of all the patterns in the list [li] in [env].

    {4 Example}
     <minimal example>

{2
Evaluation of Local Declarations
}
[eval_local_decl s ldi env m_init_opt] declares local identifiers [ldi] in
[env] with an optional initialisation value [m_init_opt].  The evaluation of
the local identifiers [ldi] under an environment [env] is either [new_env] or
raises an error and one of the following applies:

  {3 Rule.LDIgnore}

    {4 Rule}
    All of the following applies:
    - [ldi] is an identifier which can be ignored;
    - [new_env] is [env].

    {4 Example}
    [var - = 3;] evaluates [3];

    [var - : integer;] does not modify the environment.

  {3 Rule.LDVar}

    {4 Rule}
    All of the following applies:
    - [ldi] is a variable [x];
    - [m_init_opt] is a value [m];
    - [new_env] is [env] modified to declare [x] as a local identifier bound to
      value [m].

    {4 Example}
    [var x = 3;] binds [x] to the evaluation of [3] in [env].

    [var x : integer = 3] binds [x] to the evaluation of [3] in [env], without
    type consideration at runtime.

  {3 Rule.LDTypedVar}

    {4 Rule}
    All of the following applies:
    - [ldi] is a variable [x] of type [ty];
    - [m_init_opt] is [None];
    - [new_env] is [env] modified to declare [x] as a local identifier bound to
      the base value of [ty].

    {4 Example}
    [var x : integer;] binds [x] in [env] to the base value of [integer].

  {3 Rule.LDUninitialisedVar}

    {4 Rule}
    All of the following applies:
    - [ldi] is a variable [x] without a type nor an initialisation value;
    - an error is raised.

    {4 Example}
    [var x;] raises an error.

  {3 Rule.LDTuple}

    {4 Rule}
    All of the following applies:
    - [ldi] gives a list of local identifiers [ldis];
    - [m_init_opt] is a list of values [nmonads];
    - [new_env] is [env] modified to declare each element of [ldis] to be bound
      to the corresponding value in [nmonads].

    {4 Example}
    [var (x,y,z) = (1,2,3);] bounds [x] (resp. [y], [z]) to the evaluation of
    [1] (resp. [2], [3]) in [env].

  {3 Rule.LDTypedTuple}

    {4 Rule}
    All of the following applies:
    - [ldi] gives a list of local identifiers [ldis] and a type [ty];
    - [m_init_opt] is [None];
    - [new_env] is [env] modified to declare each element of [ldis] with type
      [ty].

    {4 Example}
    [var (x,y,z) : integer;] binds [x], [y] and [z] in [env] to the base value
    of [integer].

  {3 Rule.LDUninitialisedTuple}

    {4 Rule}
    All of the following applies:
    - [ldi] gives a list of local identifiers [ldis];
    - [new_env] is [env] modified to declare each element of [ldis].

    {4 Example}
    [var (x : integer, y : boolean);] binds [x] to the base value of [integer]
    and [y] to the base value of [boolean].

{2
Evaluation of Statements
}
The evaluation [eval_stmt env s] of a statement s under environment [env] is
either an interruption [Returning vs] or a new environment [new_env]. Formally,
one of the following applies:

  {3 Rule.SPass}

    {4 Rule}
    All of the following applies:
    - [s] is a pass statement;
    - [new_env] is [env].

    {4 Example}
    <minimal example>

  {3 Rule.SAssign}

    {4 Rule}
    All of the following applies:
    - [s] is an assignment [le = re];
    - [v] is the evaluation of [re] under [env];
    - [r_env] is [env] modified after evaluation of [re] under [env];
    - [new_env] is [r_env] modified after evaluation of [le] under [r_env] with
      [v].

    {4 Example}
    <minimal example>

  {3 Rule.SAssignCall}

    {4 Rule}
    <description>

    {4 Example}
    <minimal example>

  {3 Rule.SAssignTuple}

    {4 Rule}
    <description>

    {4 Example}
    <minimal example>

  {3 Rule.SReturnNone}

    {4 Rule}
    All of the following applies:
    - [s] is a return statement;
    - [vs] is [[]];
    - [new_env] is [env].

    {4 Example}
    <minimal example>

  {3 Rule.SReturnOne}

    {4 Rule}
    All of the following applies:
    - [s] is a return statement;
    - [s] gives an expression [e];
    - [v] is the evaluation of [e] under [env];
    - [vs] is [[v]];
    - [new_env] is [env] modified after evaluation of [e] under [env].

    {4 Example}
    <minimal example>

  {3 Rule.SReturnSome}

    {4 Rule}
    All of the following applies:
    - [s] is a return statement;
    - [s] gives a list of expressions [es];
    - [vs] is the piece-wise evaluation of the list [es] under [env];
    - [new_env] is [env] modified after evaluation of [e] under [env].

    {4 Example}
    <minimal example>

  {3 Rule.SThen}

    {4 Rule}
    All of the following applies:
    - [s] is a then statement;
    - [s] gives two statements [s1] and [s2];
    - [env'] is [env] modified after evaluation of [s1];
    - [new_env] is [env'] modified after evaluation of [s2].

    {4 Example}
    <minimal example>

  {3 Rule.SCall}

    {4 Rule}
    All of the following applies:
    - [s] is a call statement;
    - [s] gives a function name [name], actual arguments [actual_args] and
      parameters [params];
    - [env'] is [env] modified after evaluation of the function call;
    - [new_env] is [env'].

    {4 Example}
    <minimal example>

  {3 Rule.SCond}

    {4 Rule}
    All of the following applies:
    - [s] is a conditional statement;
    - [s] gives a condition [cond] and two statements [s1] and [s2];
    - [v_cond] is the evaluation of [cond];
    - [new_env] is [env] modified after evaluation of [s1] or [s2] depending on
      [v_cond].

    {4 Example}
    <minimal example>

  {3 Rule.SCase}

    {4 Rule}
    <description>

    {4 Example}
    <minimal example>

  {3 Rule.SAssert}

    {4 Rule}
    All of the following applies:
    - [s] is an assert statement;
    - [s] gives an expression [e];
    - [v] is the evaluation of [e];
    - if [v] is true then [new_env] is [env], otherwise an AssertionFailed
      error is raised.

    {4 Example}
    <minimal example>

  {3 Rule.SWhile}

    {4 Rule}
    All of the following applies:
    - [s] is a while statement;
    - [s] gives an expression [e] and a loop body [body];
    - [new_env] is [env] modified after evaluation of the loop [(e,body)].

    {4 Example}
    <minimal example>

  {3 Rule.SRepeat}

    {4 Rule}
    All of the following applies:
    - [s] is a repeat statement;
    - [s] gives an expression [e] and a loop body [body];
    - [new_env] is [env] modified after evaluation of the loop [(e,body)].

    {4 Example}
    <minimal example>

  {3 Rule.SFor}

    {4 Rule}
    All of the following applies:
    - [s] is a for statement;
    - [s] gives [(id,e1,dir,e2,s)];
    - <description>

    {4 Example}
    <minimal example>

  {3 Rule.SThrowNone}

    {4 Rule}
    All of the following applies:
    - [s] is a throw statement;
    - <description>

    {4 Example}
    <minimal example>

  {3 Rule.SThrowSomeTyped}

    {4 Rule}
    All of the following applies:
    - [s] is a throw statement;
    - <description>

    {4 Example}
    <minimal example>

  {3 Rule.SThrowSome}

    {4 Rule}
    All of the following applies:
    - [s] is a throw statement;
    - <description>

    {4 Example}
    <minimal example>

  {3 Rule.STry}

    {4 Rule}
    All of the following applies:
    - [s] is a try statement;
    - [s] gives [(s', catchers, otherwise_opt)];
    - [s_m] is the evaluation of the block [s'] under [env];
    - [new_env] is [env] modified after evaluation of the catchers [(catchers
      otherwise_opt s_m)].

    {4 Example}
    <minimal example>

  {3 Rule.SDeclSome}

    {4 Rule}
    All of the following applies:
    - [s] is a declaration;
    - [s] gives [(_ldk, ldi, Some e)];
    - [new_env] is [env] modified after evaluation of the local declaration
      [ldi env (Some m)].

    {4 Example}
    <minimal example>

  {3 Rule.SDeclNone}

    {4 Rule}
    All of the following applies:
    - [s] is a declaration;
    - [s] gives [(_dlk, ldi, None)];
    - [new_env] is [env] modified after evaluation of the local declaration
      [ldi env None].

    {4 Example}
    <minimal example>

  {3 Rule.SDebug}

    {4 Rule}
    All of the following applies:
    - [s] is a debug statement;
    - [s] gives a side-effect-free expression [e];
    - [v] is the evaluation of [e];
    - [new_env] is [env].

    {4 Example}
    <minimal example>

{2
Evaluation of Blocks
}

  {3 Rule.Block}

    {4 Rule}
    [eval_block env stm] is [new_env] and all of the following applies:
    - [block_env] is [env] such that the scope given by [env] is pushed onto the
      declaration stack;
    - [block_env'] is [env] modified after the evaluation of the statement [stm];
    - [new_env] is [block_env'] after restoring the variable bindings of [env],
    with the updated values of [block_env'].

    {4 Example}
    <minimal example>

{2
Evaluation of [while] and [repeat] loops
}
[eval_loop is_while env e_cond body] evaluates [body] in [env]: this is either
an interruption [Returning vs] or a new environment [new_env].

  {3 Rule.Loop}

    {4 Rule}
    Formally, [cond_m] evaluates to [e_cond] or [not e_cond] as determined by
    [is_while] and one of the following applies:

    - All of the following applies:
      * [cond_m] evaluates to [false];
      * [new_env] is [env]---the loop is exited.
    - All of the following applies:
      * [cond_m] evaluates to [true];
      * [env1] is [env] modified after the evaluation of the statement
       [body]---this step might affect the value of [cond_m] eventually leading
       to exiting the loop;
      * [new_env] is [env1] modified after the evaluation of [eval_loop
        is_while env e_cond body].

    {4 Example}
    <minimal example>

{2
Evaluation of [for] loops
}
[eval_for undet env index_name v_start dir v_end body] evaluates [body] in
[env]: this is either an interruption [Returning vs] or a new environment
[new_env].

  {3.Rule.For}

    {4 Rule}
    Formally, [cond_m] evaluates to [leq v_end v_start] or [geq v_end v_start]
    as determined by [dir] and one of the following applies:

    - All of the following applies:
      * [cond_m] evaluates to [true];
      * [new_env] is [env] as the loop is exited.
    - All of the following applies:
      * [cond_m] evaluates to [false];
      * [env1] is [env] modified after the evaluation of the statement [body];
      * [env2] is [env1] modified such that [index_name] is bound to [v_step];
      * [v_step] evaluates to [v_start+1] or [v_start-1] as determined by [dir];
      * [new_env] is [env2] modified after the evaluation of [eval_for undet
      * env index_name v_step dir v_end body].

    {4 Example}
    <minimal example>

{2
Evaluation of Catchers
}
[eval_catchers env catchers otherwise_opt s_m]

    {4 Rule}
    <description>

    {4 Example}
    <minimal example>

{2
Evaluation of Function Calls
}
[eval_call pos name env args named_args] evaluate the call to function [name]
with arguments [args] and parameters [named_args].

  {4 Rule}
  <description>

  {4 Example}
  <minimal example>

{2
Evaluation of Functions
}
[eval_func genv name pos actual_args params] evaluates the function named
[name] in the global environment [genv], with [actual_args] the list of actual
arguments, and [params] the list of arguments deduced by type equality. This is
a new global environment [new_genv] and a list of values [vs], or an error is
raised. Formally, one of the following applies:

{3 Rule.FUndefIdent}

  {4 Rule}
  All of the following applies:
  - [name] is undeclared in [genv];
  - an [UndefinedIdentifier] error is raised.

  {4 Example}
  [func main () => integer
   begin
     Foo ();
   end]
  raises an [UndefinedIdentifier "Foo"] error.

{3 Rule.FPrimitive}

  {4 Rule}
  All of the following applies:
  - [name] is bound in [genv] to a primitive function with a body [body];
  - [new_genv] is [genv];
  - [vs] is the application of [body] on [actual_args].

  {4 Example}
  [print (2,3);] calls the primitive [print] on the evaluation of [(2,3)].

{3 Rule.FBadArity}

  {4 Rule}
  All of the following applies:
  - [name] is bound in [genv] to a function with a list of formal arguments
    [arg_decls];
  - the lists [actual_args] and [arg_decls] do not have the same length;
  - an error "BadArity" is raised.

  {4 Example}
  [Zeros(3,4);] raises a [BadArity "Zeros" 1 2] error.

{3 Rule.FCall}

  {4 Rule}
  All of the following applies:
  - [name] is bound in [genv] to a function with a list of formal arguments
    [arg_decls] and a body statement [body];
  - [env1] is the environment made of [genv] and the empty local environment,
  - [env2] is [env1] modified so that each formal argument in [arg_decls] is
    locally bound to the corresponding actual argument in [actual_args];
  - [env3] is [env2] modified so that each parameter in [params] is declared;
  - [res] is the evaluation of [body] in [env3] and one of the following
    applies:
      * [res] is an environment [env4] and [new_genv] is the global environment
        given by [env4]---e.g. where the function called is either a setter or
        a procedure as per Rule R_DFWZ;

      * [res] is an interruption [Returning(xs,ret_genv)] and [new_genv] is
        [ret_genv]---this is the general case.

  {4 Example}
  [func foo (x : integer) => integer
   begin
     return x + 1;
   end

   func bar (x : integer) => integer
   begin
     print(x);
   end

   func main () => integer
   begin
     foo(2);
     bar(3);
    return 0;
   end]


{1
Typing
}
