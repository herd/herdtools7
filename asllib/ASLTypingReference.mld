{0
          ASL Typing Reference
}

{1 Disclaimer}
This material covers both ASLv0 (viz, the existing ASL pseudocode language
which appears in the Arm Architecture Reference Manual) and ASLv1, a new,
experimental, and as yet unreleased version of ASL.

This material is work in progress, more precisely at pre-Alpha quality as
per Arm’s quality standards. In particular, this means that it would be
premature to base any production tool development on this material.

However, any feedback, question, query and feature request would be most
welcome; those can be sent to Arm’s Architecture Formal Team Lead Jade
Alglave <jade.alglave@arm.com> or by raising issues or PRs to the herdtools7
github repository.

{1 Type Algebra}

{2 Predicates on Types}


  {3 TypingRule.BuiltinSingularType}

    {4 Definition}
    The builtin singular types are:
    - integer; 
    - real;
    - string; 
    - boolean; 
    - bit;
    - bits;
    - enumeration.

    {4 Comments}
    This encompasses LRM Section 3.1 D_PQCK and D_NZWT.


  {3 TypingRule.BuiltinAggregateType}

    {4 Definition}
    The builtin aggregate types are:
    - tuple;
    - array;
    - record;
    - exception.

    {4 Comments}
    This encompasses LRM Section 3.1 D_PQCK and D_KNBD.

  {3 TypingRule.BuiltinSingularOrAggregate}

    {4 Rule}
    [t] is a builtin type and one of the following applies:
    - [t] is singular;
    - [t] is aggregate.

  {3 TypingRule.NamedType} 

    {4 Definition}
    A named type is a type which is declared using the type syntax.

    {4 Comments}
    This encompasses LRM Section 7.1.1 D_VMZX.

    {4 Examples}

  {3 TypingRule.AnonymousType}

    {4 Definition} 
    An anonymous type is a type which is not declared using the type syntax. 

    {4 Comments}
    This encompasses LRM Section 7.1.1 D_VMZX.

    {4 Examples}

  {3 TypingRule.SingularType}

    {4 Definition}
    A type [t] is singular if one of the following applies:
    - [t] is a builtin singular type;
    - All of the following applies:
      - [t] is a named type;
      - [t_struct] is the structure of [t];
      - [t_struct] is a builtin singular. 

    {4 Comments}
    This encompasses LRM Section 3.1 R_GVZK.

    {4 Examples}

  {3 TypingRule.AggregateType}

    {4 Definition}
    A type [t] is aggregate if one of the following applies:
    - [t] is a builtin aggregate type;
    - All of the following applies:
      - [t] is a named type;
      - [t_struct] is the structure of [t];
      - [t_struct] is a builtin aggregate. 

    {4 Comments}
    This encompasses LRM Section 3.1 R_GVZK.

    {4 Examples}

  {3 TypingRule.NonPrimitiveType}

    {4 Definition} 
    A type [t] is non-primitive if one of the following applies:
    - [t] is a named type;
    - All of the following applies:
      - [t] is a tuple [li];
      - there exists a non-primitive type in [li];
    - All of the following applies:
      - [t] is an array of type [ty]
      - [ty] is non-primitive; 
    - All of the following applies:
      - [t] is a record with fields [fields];
      - there exists a non-primitive type in [fields];
    - All of the following applies:
      - [t] is an exception with fields [fields];
      - there exists a non-primitive type in [fields];

    {4 Comments}
    This encompasses LRM Section 7.1.1 D_GWXK.

    {4 Examples}

  {3 TypingRule.PrimitiveType}

    {4 Definitions} 
    A type [t] is primitive if it is not non-primitive.

    {4 Comments}
    This encompasses LRM Section 7.1.1 D_GWXK.

    {4 Examples}

  {3 TypingRule.Canonical}

     {4 Definition}

     {4 Comments}

     {4 Examples}

  {3 TypingRule.Structure}

    {4 Definition}
    [ty] is a type and its structure is [t_struct] and one of the following
    applies:
    - All of the following applies:
      - [ty] is a named type [x];
      - One of the following applies:
        - All of the following applies:
          - [x] is not declared in the global environment; 
          - an error "Undefined Identifier" is raised;
        - All of the following applies:
          - [x] is declared in the global environment as some type [ty'];
          - [t_struct] is the structure of [ty'];
    - All of the following applies:
      - One of the following applies:
        - [t] is [integer];
        - [t] is [real];
        - [t] is [string];
        - [t] is [bool];
        - [t] is [bits];
        - [t] is [enum];
      - [t_struct] is [ty];
    - All of the following applies:
      - [ty] is a tuple with [subtypes];
      - [t_struct] is a tuple with the structure of each element in [subtypes];
    - All of the following applies:
      - [ty] is an array with [t];
      - [t_struct] is an array with the structure of [t];
    - All of the following applies:
      - [ty] is a record with [fields];
      - [t_struct] is a record with ;
    - All of the following applies:
      - [ty] is an exception with [fields];
      - [t_struct] is a record with ;
      
    {4 Comments}
    The structure of a type is the primitive type it is equivalent to such that
    it can hold the same values. 

    This encompasses LRM Section 7.1.2 D_FXQV.

    {4 Examples}
    [type T1 of integer;]
    is the named type [T1] whose structure is integer.

    [type T2 of (integer, T1);]
    is the named type [T2] whose structure is (integer, integer). In this
    example, [(integer, T1)] is non-primitive since it uses [T1].

    In this example:
    [var x: T1;]
    the type of [x] is the named (hence non-primitive) type [T1], whose structure
    is [integer].

    In this example:
    [var y: integer;]
    the type of y is the anonymous primitive type [integer].

    In this example:
    [var z: (integer, T1);]
    the type of z is the anonymous non-primitive type `(integer, T1)` whose
    structure is `(integer, integer)`.

{2 Domain of Values for Types}

  {3 Definition}
  The domain of a type is the set of values which storage elements of that type
may hold. 

  {3 Comments}
  This encompasses LRM Section 7.1.3 D_BMGM.

  {3 Examples}
  The domain of [integer] is the infinite set of all integers.

  The domain of [bits(1)] is the set [{‘1’, ‘0’}].

  The domain of [integer {2,16}] is the set containing the integers [2] and [16].

  The domain of [bits({2,16})] is the set containing all two bit and all sixteen bit values.

{2 Constrained Types}

  {3 Definition}
  A constrained type is a type whose value is limited to a finite
  set. 

  A type which is not constrained is unconstrained.

  A constrained type with a non-empty constraint is well-constrained.

  {3 Comments}
  This encompasses LRM Section 3.4.1 D_ZTPP, R_WJYH, R_HJPN, R_CZTX, R_TPHR

  {3 Examples}
  Bitvector storage element’s widths are constrained integers.  


{1 Type satisfaction and related notions}

{2 TypingRule.Subtype} 

  {3 Definition}
  The subtype relation is a partial order.

  {3 Comments}
  Since the subtype relation is a partial order, it is reflexive, viz, 
  every type is also a subtype of itself.

  Since the subtype relation is a partial order, it is transitive, viz, if A is
  a subtype of B and B is a subtype of C then A is a subtype of C.
 
  As a consequence, there is no need to declare the reflexive and transitive
  subtype relations explicitly. All other subtype relations must be explicitly
  declared.
 
  Since the subtype relation is a partial order, it is antisymmetric. Therefore
  it is an error if all of the following apply:
  - id1 is a subtype of id2;
  - id2 is a subtype of id1.

  This encompasses LRM Section 4.3.1 R_NXRX, I_KGKS, I_MTML, I_JVRM, I_CHMP.

  {3 Examples}

{2 TypingRule.Supertype}

  {3 Definition}
  T is a supertype of S if and only if S is a subtype of T.

  {3 Comments}
  Since the subtype relation is a partial order, it is reflexive. Therefore the
  supertype relation also is reflexive, viz, every type is also a supertype of
  itself.

  This encompasses LRM Section 4.3.1 I_KGKS.

{2 TypingRule.StructuralSubtypeSatisfaction}

  {3 Definition}
  T structural-subtype-satisfies S if one of the following applies:
  - All of the following applies:
    - S has the structure of an integer type;
    - T has the structure of an integer type.

  - All of the following applies:
    - S has the structure of a real type;
    - T has the structure of a real type.
 
  - All of the following applies:
    - S has the structure of a string type;
    - T has the structure of a string type.

  - All of the following applies:
    - S has the structure of a boolean type;
    - T has the structure of a boolean type.

  - All of the following applies:
    - S has the structure of an enumeration type; 
    - T has the structure of an enumeration type;
    - S and T have the same enumeration literals.

  - All of the following applies:
    - S has the structure of a bitvector type with determined width [w];
    - One of the following applies:
      - T has the structure of a bitvector type of determined width [w];
      - T has the structure of a bitvector type of undetermined width.

  - All of the following applies:
    - S has the structure of a bitvector type with undetermined width;
    - T has the structure of a bitvector type. 

  - All of the following applies:
    - S has the structure of a bitvector type with bitfields [bitfields] and width [width];
    - T has the structure of a bitvector type with width [width];
    - for every bitfield [f] in [bitfields] there is a bitfield [f'] in [T] and
      all of the following applies:
      - [f'] has the same name, width and offset as [f];
      - [f'] type-satisfies [f].

  - All of the following applies:
    - [S] has the structure of an array type with elements of type [E];
    - [T] has the structure of an array type with elements of type [E];
    - [T] has the same element indices as [S].

  - All of the following applies:
    - [S] has the structure of a tuple type;
    - [T] has the structure of a tuple type;
    - [T] has the same number of elements as [S];
    - for each element [e] in [S] there is an element [e'] in [T] and [e']
      type-satisfies [e].
  
  - All of the following applies:
    - [S] has the structure of a record type;
    - [T] has the structure of a record type;
    - for each field [f] in [S] there is an element [f'] in [T] and [f'] has
      the same type as [f].

  - All of the following applies:
    - [S] has the structure of an exception type;
    - [T] has the structure of an exception type;
    - for each field [f] in [S] there is an element [f'] in [T] and [f'] has
      the same type as [f].

  {3 Comments}
  This encompasses LRM Section 7.3.1. D_TRVR.

  {3 Examples}

{2 TypingRule.DomainSubtypeSatisfaction}

  {3 Definition}
  T domain-subtype-satisfies S if one of the following applies:
  - All of the following applies:
    - [S] does not have the structure of an aggregate type or bitvector type;
    - the domain of [T] is a subset of the domain of [S].

  - All of the following applies:
    - One of the following applies:
      - [S] has the structure of a bitvector type with undetermined width;
      - [T] has the structure of a bitvector type with undetermined width;
   - the domain of [T] is a subset of the domain of [S].

  {3 Comments}
  This encompasses LRM Section 7.3.1. D_TRVR.

  {3 Examples}

{2 TypingRule.SubtypeSatisfaction}

  {3 Definition}
  T subtype-satisfies S if all of the following apply:
  - T structural-subtype-satisfies S;
  - T domain-subtype-satisfies S.

  {3 Comments}
  This encompasses LRM Section 7.3.1. D_TRVR.

  {3 Examples}

{2 TypingRule.TypeSatisfaction}

  {3 Definition}
  T type-satisfies S if one of the following applies:
  - T is a subtype of S;
  - All of the following applies:
    - T subtype-satisfies S;
    - One of the following applies:
      - S is an anonymous type;
      - T is an anonymous type;
  - All of the following applies:
    - T is an anonymous bitvector with no bitfields;
    - S has the structure of a bitvector (with or without bitfields);
    - S has the same width as T.

  {3 Comments}
  Since the subtype relation is a partial order, it is reflexive. Therefore
  every type T is a subtype of itself, and as a consequence, every type T
  type-satisfies itself.
  
  This encompasses LRM Section 7.3.2 R_FMXK and I_NLFD.

  {3 Examples}
  
    {4 TypingRule.TypeSatisfaction1.asl}
    In the program:
    {@asl[
    type T1 of integer;          // the named type `T1` whose structure is integer
    type T2 of integer;          // the named type `T2` whose structure is integer
    type pairT of (integer, T1); // the named type `pairT` whose structure is (integer, integer)

    func main() => integer
    begin
      var dataT1: T1;
      var pair: pairT = (1, dataT1);
      return 0;
    end
    ]} 
    [var pair: pairT = {1, dataT1}] is legal since the right-hand-side has
    anonymous, non-primitive type [(integer, T1)].

    {4 TypingRule.TypeSatisfaction2.asl}
    In the program:
    {@asl[
    type T1 of integer;          // the named type `T1` whose structure is integer
    type T2 of integer;          // the named type `T2` whose structure is integer
    type pairT of (integer, T1); // the named type `pairT` whose structure is (integer, integer)

    func main() => integer
    begin
      var dataT1: T1;
      var pair: pairT = (1, dataT1);

      let dataAsInt: integer = dataT1;
      pair = (1, dataAsInt);
      return 0;
    end
    ]}
    [pair = (1, dataAsInt);] is legal since the right-hand-side has anonymous,
    primitive type [(integer, integer)].
 
    {4 TypingRule.TypeSatisfaction3.asl}
    In the program:
    {@asl[
    type T1 of integer;          // the named type `T1` whose structure is integer
    type T2 of integer;          // the named type `T2` whose structure is integer
    type pairT of (integer, T1); // the named type `pairT` whose structure is (integer, integer)

    func main() => integer
    begin
      var dataT1: T1;
      var pair: pairT = (1,dataT1);

      let dataT2: T2 = 10;
      pair = (1, dataT2);
      return 0;
    end
    ]}
    [pair = (1, dataT2);] is illegal since the right-hand-side has anonymous,
    non-primitive type [(integer, T2)] which does not subtype-satisfy named
    type [pairT].

{2 TypingRule.TypeClash}

  {3 Definition}
  [T] type-clashes with [S] if one of the following applies:
  - [S] and [T] both have the structure of integers;
  - [S] and [T] both have the structure of reals;
  - [S] and [T] both have the structure of strings;
  - [S] and [T] both have the structure of enumeration types with the same enumeration literals;
  - [S] and [T] both have the structure of bitvectors;
  - [S] and [T] both have the structure of arrays whose element types type-clash;
  - [S] and [T] both have the structure of tuples of the same length whose
    corresponding element types type-clash;
  - [S] is a subtype of [T];
  - [S] is a supertype of [T].

  {3 Comments}
  Note that if T subtype-satisfies S then T and S type-clash, but not the other
  way around.

  Note that type-clashing is an equivalence relation. Therefore if T
  type-clashes with A and B then it is also the case that A and B type-clash.

  This encompasses LRM Section 7.3.3. D_VPZZ, I_PQCT and I_WZKM.

  {3 Examples}

{2 TypingRule.LowestCommonAncestor}

  {3 Definition}
  The lowest common ancestor of types S and T is ty and one of the following applies:
  - All of the following applies:
    - S and T are the same type;
    - ty is S.

  - All of the following applies:
    - S and T are both named types;
    - ty is a common supertype of S and T;
    - ty is a subtype of all other common supertypes of S and T.

  - All of the following applies:
    - S and T both have the structure of array types with the same index type
      and the same element types;
    - One of the following applies:
      - All of the following applies:
        - S is a named type;
        - T is an anonymous type;
        - ty is S.

      - All of the following applies:
        - S is an anonymous type;
        - T is a named type;
        - ty is T.

  - All of the following applies:
    - S and T both have the structure of tuple types with the same number of elements;
    - The types of the elements of S type-satisfy the types of the elements of T;
    - The types of the elements of T type-satisfy the types of the elements of S;
    - One of the following applies:

      - All of the following applies:
        - S is a named type;
        - T is an anonymous type;
        - ty is S.

      - All of the following applies:
        - S is an anonymous type;
        - T is a named type;
        - ty is T.

     - All of the following applies:
        - S is an anonymous type;
        - T is an anonymous type;
	- ty is the tuple type where the type of each element is the lowest common
	  ancestor of the types of the corresponding elements of S and T. 

  - All of the following applies:
    - S and T both have the structure of well-constrained integer types;
    - One of the following applies:

      - All of the following applies:
        - S is a named type;
        - T is an anonymous type;
        - ty is S.

      - All of the following applies:
        - S is an anonymous type;
        - T is a named type;
        - ty is T.

     - All of the following applies:
        - S is an anonymous type;
        - T is an anonymous type;
	- ty is the well-constrained integer type whose domain is the union of the
	  domains of S and T.      

  - All of the following applies:
    - Either S or T have the structure of an unconstrained integer type;
    - One of the following applies:

      - All of the following applies:
        - S is a named type;
        - S has the structure of an unconstrained integer type;
        - T is an anonymous type;
        - ty is S.


      - All of the following applies:
        - S is an anonymous type;
        - T is a named type;
        - T has the structure of an unconstrained integer type;
        - ty is T.


      - All of the following applies:
        - S is an anonymous type;
        - T is an anonymous type;
	- ty is the unconstrained integer type. 

  - All of the following applies:
    - Either S or T have the structure of an under-constrained integer type;
    - ty is the under-constrained integer type. 

  - ty is undefined.

  {3 Comments}
  This encompasses LRM Section 7.6.1. R_YZHM.

{2 TypingRule.CheckUnop}

  {3 Goal}
  Checking compatibility of an unary operator with the type of its argument.

  {3 Definition}
  [t] is the result of checking compatibility of a unary operator [op] with
  type [t1] and one of the following applies:
  - All of the folowing applies:
    - [op] is [BNOT];
    - [t1] type-satisfies [boolean];
    - [t] is [boolean];

  - All of the following applies:
    - [op] is [NEG];
    - One of the following applies:
      - [t1] type-satisfies [integer]; 
      - [t1] type-satisfies [real];
     - One of the following applies:
       - All of the following applies:
         - [t1] has the structure of an unconstrained integer;
         - [t] is an unconstrained integer;
       - All of the following applies:
         - [t1] has the structure of a constrained integer;
         - [t] is a constrained integer whose constraint is ;
  
  - All of the following applies:
    - [op] is [NOT];
    - [t1] has the structure of a bitvector;
    - [t] is [t1].

  {3 Comments}

  {3 Examples}

 {2 TypingRule.CheckBinop}

  {3 Goal}
  Checking compatibility of a binary operator with the types of its arguments.

  {3 Definition}
  [t] is the result of checking compatibility of a binary operator [op] with
  types [t1] and [t2] and one of the following applies:
  - All of the following applies:
    - [op] is [AND], [OR], [EQ] or [IMPL]; 
    - [t1] type-satisfies [boolean];
    - [t2] type-satisfies [boolean];
    - [t] is [boolean].

  - All of the following applies:
    - [op] is [AND], [OR], or [EOR];
    - [t1] has the structure of a bitvector;
    - [t2] has the structure of a bitvector;
    - [t1] and [t2] have the same bitvector width [w];
    - [t] is the bitvector type of width [w].

  - All of the following applies:
    - [op] is [PLUS] or [MINUS];
    - [t1] has the structure of a bitvector;
    - [t2] has the structure of a bitvector;
    - [t1] and [t2] have the same bitvector width [w];
    - [t2] type-satisfies [integer];
    - [t] is the bitvector type of width [w].

  - All of the following applies:
    - [op] is [EQ_OP] or [NEQ];
    - One of the following applies:
      - [t1] is equal to [t2];
      - All of the following applies:
        - [t1] type-satisfies [integer];
        - [t2] type-satisfies [integer];
      - All of the following applies:
        - [t1] has the structure of a bitvector;
        - [t2] has the structure of a bitvector;
        - [t1] and [t2] have the same bitvector width;
      - All of the following applies:
        - [t1] type-satisfies [boolean];
        - [t2] type-satisfies [boolean];
      - All of the following applies:
        - [t1] enumerates local declarations [li1]; 
        - [t2] enumerates local declarations [li2];
        - [li1] equals [li2];
    - [t] is [boolean].
   
  - All of the following applies:
    - [op] is [LEQ], [GEQ], [GT] or [LT];
    - One of the following applies:
      - All of the following applies:
        - [t1] type-satisfies [integer];
        - [t2] type-satisfies [integer];
      - All of the following applies:
        - [t1] type-satisfies [real];
        - [t2] type-satisfies [real];
    - [t] is boolean.

  - All of the following applies:
    - [op] is [MUL], [DIV], [DIVRM], [MOD], [SHL], [SHR], [POW], [PLUS] or [MINUS];
    - [struct1] is the structure of [t1];
    - [struct2] is the structure of [t2];
    - One of the following applies:
      - All of the following applies:
        - [t1] has the structure of an unconstrained integer;
        - [t2] has the structure of an integer;
        - [t] is an unconstrained integer;
      - All of the following applies:
        - [t1] has the structure of an integer;
        - [t2] has the structure of an unconstrained integer;
        - [t] is an unconstrained integer;
      - One of the following applies:
        - All of the following applies:
          - [t1] has the structure of an under-constrained integer;
          - [t2] has the structure of a constrained integer;
          - [t] is an under-constrained integer;
        - All of the following applies:
          - [t1] has the structure of a constrained integer;
          - [t2] has the structure of an under-constrained integer;
          - [t] is an under-constrained integer;
      - One of the following applies:
         - All of the following applies:
           - [t1] has the structure of a well-constrained integer;
           - [t2] has the structure of a well-constrained integer;
	   - [t] is a constrained integer whose constraint is calculated by
	     applying the operation to all possible value pairs;
         - All of the following applies:
           - [t1] has the structure of a well-constrained integer;
           - [t2] has the structure of an well-constrained integer;
	   - [t] is a constrained integer whose constraint is calculated by
	     applying the operation to all possible value pairs;
      - All of the following applies:
        - [t1] has the structure of [real];
        - [t2] has the structure of [real];
        - [op] is [PLUS], [MINUS] or [MUL];
        - [t] is [real];
     - All of the following applies:
       - [t1] has the structure of [real];
       - [t2] has the structure of [integer];
       - [op] is [POW];
       - [t] is [real];
 
  - All of the following applies:
    - [op] is [RDIV];
    - [t1] type-satisfies [real];
    - [t] is [real].

  {3 Comments}
  This encompasses LRM Section 7.5.3 R_BKNT, Section 7.5.5 R_ZYWY, R_BZKW,
  R_KFYS, Section 7.5.6 R_KXMR, Section 7.7 R_SQXN, R_MRHT.

  {3 Examples} 

{1
Typing Rules
}

{2
Typing of Programs
}

  {3 Definition}
  Typing a program is typing its main function.  Constructively, typing a
  program requires following its Abstract Syntax Tree and typing each of its
  components.

  Formally, the types of a program are given by applying a set of
  annotate_<object> functions. Each annotate_<object> function describes how to
  annotate a specific object, as follows.

      - [annotate_expr] annotates expressions;
      - [annotate_slices] annotates slices;
      - [annotate_pattern] annotates pattern;
      - [annotate_local_decl_item] annotates local declarations;
      - [annotate_lexpr] annotates left-hand sides of assignments;
      - [annotate_stmt] annotates statements;
      - [annotate_block] annotates blocks;
      - [annotate_catcher] annotates catchers;
      - [annotate_call] annotates functions calls;
      - [annotate_func] annotates functions.

  {3 Comments}
  This encompasses LRM 7.4.2. R_VDPC.

{2
Typing of Expressions
}

[annotate_expr] specifies how to annotate an expression [e] in an environment
[env].  Formally, the result of annotating the expression [e] in [env] is
[t,new_e] and one of the following applies:

{3 TypingRule.Lit}

  {4 Rule}
  All of the following applies:
  - [e] is a Literal [v];
  - [t] is the type of [v];
  - [new_e] is [e].

  {4 Examples}

{3 TypingRule.TypedExpr}

  {4 Rule}
  All of the following applies:
  - [e] is a typed expression [(e',t')];
  - [t'',e''] is the result of annotating [e'] in [env];
  - One of the following applies:
    - All of the following applies:
      - [t''] is a structural subtype of [t'] in [env];
      - [t''] is a domain subtype of [t'] in [env];
      - [t] is [t'];
      - [new_e] is [e''].
    - All of the following applies:
      - [t''] is a structural subtype of [t'] in [env];
      - [t''] is not a domain subtype of [t'] in [env];
      - an execution-time check that the expression evaluates to a value in the
        domain of the required type is required.
   - All of the following applies:
     - [t''] is not a structural subtype of [t'] in [env];
     - a "ConflictingTypes" error is raised.

  {4 Examples}

{3 TypingRule.ELocalVarConstant}

  {4 Rule}
  All of the following applies:
  - [e] is a variable [x];
  - [x] maps to a type [ty] in the [storage_types] of the local environment given by [env];
  - [x] maps to a local constant [v];
  - [t] is [ty];
  - [new_e] is the Literal [v].

  {4 Examples}

{3 TypingRule.ELocalVar}

  {4 Rule}
  All of the following applies:
  - [e] is a variable [x];
  - [x] maps to a type [ty] in the [storage_types] of the local environment given by [env];
  - [x] does not map to a local constant;
  - [t] is [ty];
  - [new_e] is [e].

  {4 Examples}

{3 TypingRule.EGlobalVarConstantVal}

  {4 Rule}
  All of the following applies:
  - [e] is a variable [x];
  - [x] maps to a type [ty] in the [constant_values] of the global environment given by [env];
  - [x] maps to a global constant;
  - [x] maps to a value [v];
  - [t] is [ty];
  - [new_e] is [E_Literal v].

  {4 Examples}

{3 TypingRule.EGlobalVar}

  {4 Rule}
  All of the following applies:
  - [e] is a variable [x];
  - [x] maps to a type [ty] in the [constant_values] of the global environment given by [env];
  - [x] does not map to a global constant;
  - [t] is [ty];
  - [new_e] is [e].

  {4 Examples}

{3 TypingRule.EUndefIdent}

  {4 Rule}
  All of the following applies:
  - [e] is a variable [x];
  - [x] is not bound in [env];
  - an error "Undefined Identifier" is raised.

  {4 Examples}

{3 TypingRule.Binop}

  {4 Rule}
  All of the following applies:
  - [e] denotes a binary operation [op] over two expressions [e1] and [e2];
  - [t1,e1'] is the result of annotating [e1] in [env];
  - [t2,e2'] is the result of annotating [e2] in [env];
  - [t] is the result of checking compatibility of [op] with [t1] and [t2];
  - [new_e] denotes [op] over [e1'] and [e2'].

  {4 Examples}

{3 TypingRule.Unop}

  {4 Rule}
  All of the following applies:
  - [e] denotes a unary operation [op] over an expression [e'];
  - [t'',e''] is the result of annotating [e'] in [env];
  - [t] is the result of checking compatibility of [op] with [t''];
  - [new_e] denotes [op] over [e''].

  {4 Examples}

{3 TypingRule.ECond}

  {4 Rule}
  All of the following applies:
  - [e] denotes a condition [e_cond] with two options [e_true] and [e_false];
  - [t_cond, e'_cond] is the result of annotating [e_cond] in [env];
  - [t_true, e'_true] is the result of annotating [e_true] in [env];
  - [t_false, e'_false] is the result of annotating [e_false] in [env];
  - One of the following applies:
    - All of the following applies:
      - [t] is the lowest common ancestor of [t_true] and [t_false];
      - [new_e] is the condition [e'_cond] with two options [e'_true] and [e'_false].
    - All of the following applies:
      - there is no lowest common ancestor of [t_true] and [t_false];
      - an error "Unreconciliable Types" is raised.

  {4 Comments}
  This encompasses LRM Section 7.6 R_XZVT.

  {4 Examples}

{3 TypingRule.ETuple}

  {4 Rule}
  All of the following applies:
  - [e] denotes a tuple [li];
  - [ts, es] is the result of annotating in [env] each expression in [li];
  - [t] is [ts];
  - [new_e] is [es].

  {4 Examples}

{3 TypingRule.EConcatEmpty}

  {4 Rule}
  All of the following applies:
  - [e] denotes the empty concatenation;
  - [t] is [bits(0)];
  - [new_e] is [e].

  {4 Examples}

{3 TypingRule.EConcat}

  {4 Rule}
  All of the following applies:
  - [e] denotes the concatenation of a non-empty list of expressions [li];
  - [ts, es] is the result of annotating [li] in [env];
  - [w] is the sum of the widths of the bitvector types [ts];
  - [t] is [bits(w)];
  - [new_e] is [es].

  {4 Comments}
  This encompasses LRM Section 7.8 R_NYNK and R_KCZS.

  {4 Examples}

{3 TypingRule.ERecordNotARecord}

  {4 Rule}
  All of the following applies:
  - [e] denotes the record expression of type [ty] with fields [fields];
  - [ty] is neither a record nor an exception type;
  - an error "Conflicting Types" is raised.

  {4 Comments}
  This encompasses LRM Section 5.5 R_WBCQ.

  {4 Examples}

{3 TypingRule.ERecordMissingField}

  {4 Rule}
  All of the following applies:
  - [e] denotes the record expression of type [ty] with fields [fields];
  - [ty] is the name of a record type with fields [field_types];
  - one field in [field_types] is not initialised by [fields];
  - an error "Bad Fields" is raised.

  {4 Comments}
  This encompasses LRM Section 5.5 R_WBCQ.

  {4 Examples}

{3 TypingRule.ERecord}

  {4 Rule}
  All of the following applies:
  - [e] denotes the record expression of type [ty] with fields [fields];
  - [ty] is the name of a record type with fields [field_types];
  - For each field named [name] associated with the expression [e'] in
    [field_types], all of the following applies:
    - [t',e''] is the result of annotating [e'] in [env];
    - [t_spec'] is the type associated to [name] in [field_types];
    - [t'] type-satisfies [t_spec'];
    - [fields'] associates [name] to [e''];
  - [t] is [ty];
  - [new_e] is the record expression of type [ty] with fields [fields'].

  {4 Comments}
  This encompasses LRM Section 5.5 R_WBCQ.

  {4 Examples}

{3 TypingRule.ECall}

  {4 Rule}
  All of the following applies:
  - [e] denotes a call to a function named [name] with arguments [args] and
    parameters [eqs];
  - [name', args', eqs', ty] is the result of annotating the call of
    that function in [env];
  - [t] is [ty];
  - [new_e] is the call the function named [name'] with arguments [args']
    and parameters [eqs'].

  {4 Examples}

{3 TypingRule.EUnknown}

  {4 Rule}
  All of the following applies:
  - [e] denotes an unknown expression of type [ty];
  - [ty'] is the structure of [ty] in [env];
  - [t] is [ty];
  - [new_e] is an unknown expression of type [ty'].

  {4 Examples}

{3 TypingRule.ESlice}

  {4 Rule}
  All of the following applies:
  - [e] denotes the slicing of expression [e'] by the slices [slices];
  - [t_e',e'] is the result of annotating the expression [e'] in [env];
  - [t_e'] has the structure of an integer or a bitvector;
  - [w] is the width of [slices];
  - [slices'] is the result of annotating [slices] in [env];
  - [t] is the bitvector type of width [w];
  - [new_e] is the slicing of expression [e'] by the slices [slices'].

  {4 Examples}

{3 TypingRule.EGetArray}

  {4 Rule}
  All of the following applies:
  - [e] denotes the slicing of expression [e'] by the slices [slices];
  - [t_e',e'] is the result of annotating the expression [e'] in [env];
  - [t_e'] has the structure of an array of size [size] and type [t];
  - One of the following applies:
    - [wanted_t_index] is an enumeration type of name [size];
    - [wanted_t_index] is the type [integer {0..size-1}];
  - [slices] is a single expression [e_index];
  - [t_index', e_index'] is the result of annotating [e_index] in [env];
  - [t_index'] type-satisfies [wanted_t_index];
  - [new_e] is an access to array [e'] at index [e_index'].

  {4 Examples}

{3 TypingRule.EGetRecordField}

  {4 Rule}
  All of the following applies:
  - [e] denotes the access of field [field_name] on expression [e1];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is an Exception or a Record type with fields [fields];
  - [field_name] is declared in [fields];
  - [t] is the type corresponding to [field_name] in [fields];
  - [new_e] is the access of field [field_name] on expression [e2].

  {4 Examples}

{3 TypingRule.EGetBadRecordField}

  {4 Rule}
  All of the following applies:
  - [e] denotes the access of field [field_name] on expression [e1];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is an Exception or a Record type with fields [fields];
  - [field_name] is not declared in [fields];
  - an error "Bad Field" is raised.

  {4 Examples}

{3 TypingRule.EGetBadBitField}

  {4 Rule}
  All of the following applies:
  - [e] denotes the access of field [field_name] on expression [e1];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is a bitvector type with bitfields [bitfields];
  - [field_name] is not declared in [bitfields];
  - an error "Bad Field" is raised.

  {4 Examples}

{3 TypingRule.EGetBadField}

   {4 Rule}
   All of the following applies:
   - [e] denotes the access of field [field_name] on expression [e1];
   - [t_e1, e2] is the result of annotating [e1] in [env];
   - [t_e1] does not have the structure of a record or an exception or a bitvector type;
   - an error "Conflicting Types" is raised.

   {4 Examples}

{3 TypingRule.EGetBitField}

  {4 Rule}
  All of the following applies:
  - [e] denotes the access of field [field_name] on expression [e1];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is a bitvector type with bitfields [bitfields];
  - [field_name] is declared in [bitfields];
  - [slices] gives the slices corresponding to the bitfield [field_name]
    in [bitfields];
  - [e3] denotes the slicing of the expression [e2] by the slices [slices];
  - [t,new_e] is the result of annotating [e3].

  {4 Examples}

{3 TypingRule.EGetBitFieldNested}

  {4 Rule}
  All of the following applies:
  - [e] denotes the access of field [field_name] on expression [e1];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is a bitvector type with bitfields [bitfields];
  - [field_name] is declared in [bitfields];
  - [slices] gives the slices corresponding to the bitfield [field_name] in
    [bitfields];
  - [e3] denotes the slicing of the expression [e2] by the slices [slices];
  - [t4, e4] is the result of annotating [e3] in [env];
  - [bitfields'] gives the bitfields corresponding to the bitfield [field_name]
    in [bitfields];
  - [t] is the bitvector type with the width of [t4] and the bitfields [bitfields']
  - [new_e] is [e4].

  {4 Examples}

{3 TypingRule.EGetBitFieldTyped}

  {4 Rule}
  All of the following applies:
  - [e] denotes [e1, field_name];
  - [t_e1, e2] is the result of annotating [e1] in [env];
  - [t_e2] is the anonymous type corresponding to [t_e1] in [env];
  - [t_e2] is a bitvector type with bitfields [bitfields];
  - [field_name] is declared in [bitfields];
  - [slices] gives the slices corresponding to the bitfield [field_name] in
    [bitfields];
  - [t_e3,e3] is the result of annotating [e2,slices] in [env];
  - [t] gives the type corresponding to the bitfield [field_name] in [bitfields];
  - [t_e3] type-satisfies [t] in [env];
  - [new_e] is [e3].

  {4 Examples}

{3 TypingRule.EGetBitFields}

  {4 Rule}
  <description>

  {4 Examples}
  <minimal example>

{3 TypingRule.EPattern}

  {4 Rule}
  All of the following applies:
  - [e] denotes whether the expression [e'] matches [patterns];
  - [t_e', e''] is the result of annotating [e'] in [env];
  - [patterns'] is the result of annotating [patterns] in [env];
  - [t] is [boolean];
  - [new_e] denotes whether the expression [e''] matches [patterns'].

  {4 Examples}

{2
Typing of Left-Hand-Side Expressions
}
[annotate_lexpr version env le t_e] is [new_le] and one of the following
applies:

  {3 TypingRule.LEIgnore}

    {4 Rule}
    All of the following applies:
    - [le] denotes an expression which can be ignored;
    - [new_le] is [le].

    {4 Examples}

  {3 TypingRule.LELocalVar}

    {4 Rule}
    All of the following applies:
    - [le] denotes a local variable [x] of type [ty];
    - [x] is locally declared as a variable of type [ty] in [env];
    - [new_le] is [le].

    {4 Examples}

  {3 TypingRule.LEGlobalVar}

    {4 Rule}

    {4 Examples}

  {3 TypingRule.LETuple}

    {4 Rule}
    All of the following applies:
    - [le] denotes a tuple [les];
    - [t_e] denotes a tuple type [sub_tys];
    - One of the following applies:
      - All of the following applies:
        - [les] and [sub_tys] have the same length;
        - [new_le] is the result of annotating [les] with [sub_tys] in [env]
      - All of the following applies:
        - [les] and [sub_tys] do not have the same length;
        - an error "Bad Arity Tuple Unpacking" is raised.

    {4 Examples}

  {3 TypingRule.LESlice}

    {4 Rule}
    All of the following applies:
    - [le] denotes the slicing of a left-hand-side expression [le1] by the slices [slices];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [t_le1] has the structure of a bitvector type;
    - [le2] is the result of annotating [le1] in [env];
    - [width] is the width of the slices [slices] in [env];
    - [t] is the bitvector type of width [width];
    - [slices2] is the result of annotating [slices] in [env];
    - [new_le] is the slicing of [le2] by [slices2].
 
    {4 Examples}

  {3 TypingRule.LESetArray}

    {4 Rule}
    All of the following applies:
    - [le] denotes the slicing of a left-hand-side expression [le1] by the slices [slices];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [t_le1] has the structure of an array type of size [size] and item type [t];
    - [le2] is the result of annotating [le1] in [env];
    - One of the following applies:
      - [wanted_t_index] is an enumeration type of name [size];
      - [wanted_t_index] is the type [integer {0..size-1}];
    - [slices] is a single expression [e_index];
    - [t_index', e_index'] is the result of annotating [e_index] in [env];
    - [t_index'] type-satisfies [wanted_t_index];
    - [new_le] is an access to array [le2] at index [e_index'].  

    {4 Examples}

  {3 TypingRule.LESetBadRecordField}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of an exception or a record type with fields [fields];
    - [field] is not declared in [fields];
    - an error "Bad Field" is raised.

    {4 Examples}

  {3 TypingRule.LESetRecordField}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of an exception or a record type with fields [fields];
    - [field] is bound to type [t] in [fields];
    - [t_e] type-satisfies [t]; 
    - [new_le] is the access to the field [field] in [le2].

    {4 Examples}

  {3 TypingRule.LESetBadBitField}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of a bitvector with bitfields [bitfields];
    - [field] is not declared in [bitfields];
    - an error "Bad Field" is raised.  

    {4 Examples}

  {3 TypingRule.LESetBitField}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of a bitvector with bitfields [bitfields];
    - [field] is declared in [bitfields];
    - [slices] gives the slices corresponding to the bitfield [field] in
      [bitfields];
    - [w] is the width of [slices];
    - [t] is the bitvector type of width [w];
    - [t_e] type-satisfies [t];
    - [le2] is the slicing of [le1] by [slices];
    - [new_le] is the result of annotating [le2] in [env].

    {4 Examples}

  {3 TypingRule.LESetBitFieldNested}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of a bitvector with bitfields [bitfields];
    - [slices] gives the slices corresponding to the bitfield [field] in
      [bitfields];
    - [w] is the width of [slices];
    - [bitfields'] gives the bitfields corresponding to [field] in [bitfields];
    - [t] is the bitvector type of width [w] and bitfields [bitfields'];
    - [t_e] type-satisfies [t];
    - [le2] is the slicing of [le1] by [slices];
    - [new_le] is the result of annotating [le2] in [env].

    {4 Examples}

  {3 TypingRule.LESetBitFieldTyped}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] has the structure of a bitvector with bitfields [bitfields];
    - [slices] gives the slices corresponding to the bitfield [field] in
      [bitfields];
    - [w] is the width of [slices];
    - [t'] is the bitvector type of width [w];
    - [t] gives the type corresponding to the bitfield [field] in
      [bitfields];
    - [t'] type-satisfies [t];
    - [t_e] type-satisfies [t];
    - [le2] is the slicing of [le1] by [slices];
    - [new_le] is the result of annotating [le2] in [env].

    {4 Examples}

  {3 TypingRule.LESetBadField}

    {4 Rule}
    All of the following applies:
    - [le] denotes the access to the field named [field] in [le1];
    - [t_le1] is the type result of annotating the right-hand-side expression corresponding to [le1] in [env];
    - [le2] is the result of annotating [le1] in [env];
    - [t_le1] does not have the structure of a record, or an exception or a bitvector type;
    - an error "Conflicting Types" is raised.

    {4 Examples}

  {3 TypingRule.LESetFields}

    {4 Rule}

    {4 Examples}

  {3 TypingRule.LEConcat}
    {4 Rule}
    

    {4 Examples}



{2
Typing of Local Declarations
}
[annotate_local_decl_item loc env ty ldk ldi] is [new_env, new_ldi] and one
of the following applies:

  {3 Comments}
  This encompasses LRM Section 7.4.2 R_YSPM.

  {3 TypingRule.LDIgnoreNone}

    {4 Rule}
    All of the following applies:
    - [ldi] is a local declaration which can be ignored;
    - no type is given;
    - [new_env] is [env];
    - [new_ldi] is [ldi].

    {4 Examples}

  {3 TypingRule.LDIgnoreSome}

    {4 Rule}
    All of the following applies:
    - [ldi] is a local declaration which can be ignored;
    - a type [t] is given;
    - One of the following applies:
      - All of the following applies:
        - [t] can be initialised with [ty] in [env];
        - [new_env] is [env];
        - [new_ldi] is [ldi].
      - All of the following applies:
        - [t] cannot be initialised with [ty] in [env];
        - an error "Conflicting Types" is raised.

    {4 Examples}

  {3 TypingRule.LDVar}

    {4 Rule}
    All of the following applies:
    - [ldi] denotes a variable [x] with an optional type [ty_opt];
    - [x] is not declared in [env];
    - One of the following applies:
      - All of the following applies:
        - [ty_opt] is [None];
        - [t] is [ty]
      - All of the following applies:
        - [ty_opt] is [Some t];
        - [t] can be initialized with [ty] in [env];
    - [new_env] is [env] modified so that [x] is locally declared of type [t];
    - [new_ldi] is the declaration of variable [x] with type [t].

    {4 Examples}

  {3 TypingRule.LDUninitialisedTypedTuple}

    {4 Rule}
    All of the following applies:
    - [ldi] denotes a singleton list [ld];
    - [new_env, new_ldi] is the result of annotating the local declaration [ld] with [ty] in [env].

    {4 Examples}

  {3 TypingRule.LDTuple}

    {4 Rule}

    {4 Examples}

  {3 TypingRule.LDTypedTuple}

    {4 Rule}

    {4 Examples}

{2
Typing of Statements
}
[annotate_stmt env s] is a statement [new_s] and an environment [new_env] and
one of the following applies:

  {3 TypingRule.SPass}

    {4 Rule}
    All of the following applies:
    - [s] is a pass statement;
    - [new_s] is [s];
    - [new_env] is [env].

    {4 Examples}

  {3 TypingRule.SThen}

    {4 Rule}
    All of the following applies:
    - [s] is a then statement over two statements [s1] and [s2];
    - [new_s1, env1] is the result of annotating [s1] in [env];
    - [new_s2, env2] is the result of annotating [s2] in [env1];
    - [new_s] is a then statement over two statements [new_s1] and [new_s2];
    - [new_env] is [env2].

    {4 Examples}

  {3 TypingRule.SAssign}

    {4 Rule}
    All of the following applies:
    - [s] is an assignment [le = re] under language version [ver];
    - [t_e, e1] is the result of annotating [e] in [env];
    - [reduced] is the result of potential result of inlining a setter call in [le];
    - One of the following applies:
      - All of the following applies:
        - [reduced] gives a statement [s];
        - [new_s] is [s];
        - [new_env] is [env].
     
      - All of the following applies:
        - [reduced] does not give a statement [s];
        - One of the following applies:
          - All of the following applies:
            - [ver] is ASLv1;
            - [env1] is [env];

          - All of the following applies:
            - [ver] is ASLv0;
	    - [env1] is the result of annotating undeclared variables by using
	      the first assignments to such variables as declarations;
 
        - [le1] is the result of annotating [le] in [env1];
        - [new_s] is the assignment [le1 = e1];
        - [new_env] is [env1].

    {4 Examples}

  {3 TypingRule.SCall}

    {4 Rule}
    All of the following applies:
    - [s] is a call to a function named [name] with arguments [args] and parameters [eqs];
    - [new_name, new_args, new_eqs] is the result of annotating the call
      to the procedure [name] with arguments [args] and parameters
[eqs];
    - [new_s] is the call to a function named [new_name] with arguments
      [new_args] and parameters [new_eqs];
    - [new_env] is [env].

    {4 Examples}

  {3 TypingRule.SReturnNone}

    {4 Rule}
    All of the following applies:
    - [s] is a return statement with no value and no return type; 
    - [new_s] is a return statement with no value;
    - the enclosing function does not have a return type (it is either a setter
      or a procedure);
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_FTPK.

    {4 Examples}

  {3 TypingRule.SReturnOne}

    {4 Rule}
    All of the following applies:
    - One of the following applies:
      - All of the following applies:
        - [s] is a return statement with some value;
        - the enclosing function does not have a return type;
      - All of the following applies:
        - [s] is a return statement with no value;
        - the enclosing function has a return type;
    - An error "Bad Return Statement" is raised.

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_FTPK.

    {4 Examples}

  {3 TypingRule.SReturnSome}

    {4 Rule}
    All of the following applies:
    - [s] is a return statement with some value [e];
    - the enclosing function has a return type [t];
    - [t_e',e'] is the result of annotating [e] in [env];
    - [t_e'] type-satisfies [t];
    - [new_s] is a return statement with value [e'];
    - [new_env] is [env]. 

    {4 Examples}

  {3 TypingRule.SCond}

    {4 Rule}
    All of the following applies:
    - [s] is a condition [e] with two statements [s1] and [s2];
    - [t_cond, e_cond] is the result of annotating [e] in [env];
    - [t_cond] type-satisfies [t_bool]; (* is this the same as [e] having the structure of a boolean? *)
    - [s1'] is the result of annotating [s1] in [env];
    - [s2'] is the result of annotating [s2] in [env];
    - [new_s] is the condition [e_cond] with two statements [s1'] and [s2'];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_NBDJ.

    {4 Examples}

  {3 TypingRule.SCase}

    {4 Rule}
    All of the following applies:
    - [s] is a case statement with expression [e] and cases [cases];
    - [t_e, e1] is the result of annotating [e] in [env];
    - [cases1, env1] is the result of annotating each case in [cases];
    - [new_s] is a case statement with expression [e1] and cases [cases1];
    - [new_env] is [env1].
    (* do we not check that [e] has the structure of a boolean? *)

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_WGSY.

    {4 Examples}

  {3 TypingRule.SAssert}

    {4 Rule}
    All of the following applies:
    - [s] is an assert statement with expression [e];
    - [t_e',e'] is the result of annotating [e] in [env];
    - [t_e'] type-satisfies [t_bool];  
    - [new_s] is an assert statement with expression [e'];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_JQYF

    {4 Examples}

  {3 TypingRule.SWhile}

    {4 Rule}
    All of the following applies:
    - [s] is a while statement with expression [e1] and statement [s1];
    - [t, e2] is the result of annotating [e1] in [env];
    - [t] type-satisfies [t_bool]; (* is this the same as [e1] having the structure of a boolean? *)
    - [s2] is the result of annotating [s1] in [env];
    - [new_s] is a while statement with expression [e2] and statement [s2];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_FTVN.

    {4 Examples}

  {3 TypingRule.SRepeat}

    {4 Rule}
    All of the following applies:
    - [s] is a repeat statement with expression [e1] and statement [s1];
    - [s2] is the result of annotating [s1] in [env];
    - [t, e2] is the result of annotating [e1] in [env];
    - [t] type-satisfies [t_bool]; (* is this the same as [e1] having the structure of a boolean? *)
    - [new_s] is a repeat statement with expression [e2] and statement [s2];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_FTVN.

    {4 Examples}

  {3 TypingRule.SFor}

    {4 Rule}
    All of the following applies:
    - [s] is a for statement with index [id], direction [dir], two expressions
      [e1] and [e2] and a statement [s'];
    - [t1,e1'] is the result of annotating [e1] in [env];
    - [t2,e2'] is the result of annotating [e2] in [env];
    - [t1] has the structure of an integer type;
    - [t2] has the structure of an integer type;
    - [ty] is ;
    - [s''] is the result of annotating [s'] in [env];
    - [new_s] is a for statement with index [id], direction [dir], two expressions
      [e1'] and [e2'] and statement [s''];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_VTJW.

    {4 Examples}

  {3 TypingRule.SDeclSome}

    {4 Rule}
    All of the following applies:
    - [s] is a declaration with [ldk], [ldi] and an expression [e];
    - [t_e,e'] is the result of annotating [e] in [env];
    - [env', ldi'] is the result of declaring the local identifiers of [ldi] in [env];
    - [new_s] is a declaration with [ldk], [ldi'] and an expression [e'];
    - [new_env] is [env'].

    {4 Examples}

  {3 TypingRule.SDeclNone}

    {4 Rule}
    All of the following applies:
    - [s] is a declaration statement with [ldk], [ldi] and no initial expression;
    - [env', s'] is the result of annotating uninitialised local declarations [ldi] in [env];
    - [new_s] is [s'];
    - [new_env] is [env'].

    {4 Examples}

  {3 TypingRule.SThrowNone}

    {4 Rule}
    All of the following applies:
    - [s] is a throw statement with no expression;
    - [new_s] is [s];
    - [new_env] is [env].

    {4 Examples}

  {3 TypingRule.SThrowSome}

    {4 Rule}
    All of the following applies:
    - [s] is a throw statement with expression [e];
    - [t_e,e'] is the result of annotating [e] in [env];
    - [t_e] has the structure of an exception type;
    - [new_s] is a throw statement with expression [e'] and type [t_e];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_NXRC.

    {4 Examples}

  {3 TypingRule.STry}

    {4 Rule}
    All of the following applies:
    - [s] is a try statement with statement [s'], catchers [catchers] and block [otherwise];
    - [s''] is the result of annotating [s'] in [env];
    - [otherwise'] is the result of annotating [otherwise] in [env];
    - [catchers'] is the result of annotating [catchers] in [env];
    - [new_s] is a try statement with statement [s''], catchers [catchers'] and block [otherwise'];
    - [new_env] is [env].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_WVXS.

    {4 Examples}

{2
Typing of Slices
}
[annotate_slices env slices] is the pair [(offset, length)] and one of the
following applies:

  {3 TypingRule.SliceLength}

    {4 Rule}
    All of the following applies:
    - [slices] gives [offset] and [length]; 
    - [t_offset, offset'] is the result of annotating [offset] in [env];
    - [t_length, length'] is the result of annotating [length] in [env];
    - [t_offset] has the structure of an integer type;
    - [t_length] has the structure of an integer type;
    - [length] is pure.

    {4 Examples}

  {3 TypingRule.SliceSingle}

    {4 Rule}
    All of the following applies: 
    - [slices] gives an index [i];
    - [(offset, length)] is the result of applying TypingRule.SliceLength to [i, i+:1].

    {4 Comments}
    R_GXKG: The notation b[i] is syntactic sugar for b[i +: 1].

    {4 Examples}

  {3 TypingRule.SliceRange}

    {4 Rule}
    All of the following applies:
    - [slices] gives a range [(j, i)];
    - [pre_length] is [i +: j-i+1];
    - [offset, length] is the result of applying TypingRule.SliceLength to [i,pre_length].

    {4 Comments}
    R_GXKG: The notation b[j:i] is syntactic sugar for b[i +: j-i+1].

    {4 Examples}

  {3 TypingRule.SliceStar}

    {4 Rule}
    All of the following applies:
    - [slices] gives [(factor, pre_length)];
    - [pre_offset] is [factor * pre_length];
    - [offset, length] is the result of applying TypingRule.SliceLength to [(pre_offset, pre_length)].

    {4 Comments}
    R_GXQG: The notation b[i *: n] is syntactic sugar for b[i*n +: n]

    {4 Examples}

{2
Typing of Patterns
}
[annotate_pattern loc env t p] is [new_p] and one of the following applies:

  {3 TypingRule.PAll}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern matching everything;
    - [new_p] is [p].

    {4 Examples}

  {3 TypingRule.PAny}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches anything in a list [li];
    - [new_li] is the result of mapping the result of annotating [p] in [env] onto [li];
    - [new_p] is the pattern which matches anything in [new_li].

    {4 Examples}

  {3 TypingRule.PNot}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches the negation of a pattern [q];
    - [new_q] is the result of annotating [q] in [env]; 
    - [new_p] is pattern which matches the negation of [new_q].

    {4 Examples}

  {3 TypingRule.PSingle}

    {4 Rule}

    {4 Examples}

  {3 TypingRule.PGeq}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches anything greater than or equal to an expression [e];
    - [t_e, e'] is the result of annotating [e] in [env]; 
    - [e'] is a compile-time constant;
    - [t] has the structure of an integer;
    - [t_e] has the structure of an integer;
    - [new_p] is the pattern which matches anything greater than or equal to [e'].

    {4 Examples}

  {3 TypingRule.PLeq}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches anything lesser than or equal to an expression [e];
    - [t_e, e'] is the result of annotating [e] in [env]; 
    - [e'] is a compile-time constant;
    - [t] has the structure of an integer;
    - [t_e] has the structure of an integer;
    - [new_p] is the pattern which matches anything lesser than or equal to [e'].

    {4 Examples}

  {3 TypingRule.PRange}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches anything within the range given by
      expressions [e1] and [e2];
    - [t_e1, e1'] is the result of annotating [e1] in [env];
    - [t_e2, e2'] is the result of annotating [e2] in [env];
    - [t] has the structure of an integer;
    - [t_e1] has the structure of an integer;
    - [t_e2] has the structure of an integer;
    - e1' and e2' are compile-time constants; 
    - [new_p] is the pattern which matches anything within the range given by
      expressions [e1'] and [e2'].

    {4 Examples}

  {3 TypingRule.PMask}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches a mask [m];
    - [t] has the structure of a bitvector type;
    - [n] is the length of mask [m];
    - [t_m] is the bitvector type of width [n];
    - [t] type-satisfies [t_m];
    - [new_p] is [p].

    {4 Examples}

  {3 TypingRule.PTupleBadArity}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches a tuple [li];
    - [t] has the type structure of a tuple type [ts];
    - [ts] is a list of different size to the size of [li];
    - an error "Bad Arity" is raised. 

    {4 Examples}

  {3 TypingRule.PTuple}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches a tuple [li];
    - [t_struct] is the type structure of [t];
    - [t_struct] is a tuple [ts];
    - [ts] is a list of same size to the size of [li];  
    - [new_li] is the result of annotating [li] with [ts];
    - [new_p] is the pattern which matches the tuple [new_li].

    {4 Examples}

  {3 TypingRule.PTupleConflict}

    {4 Rule}
    All of the following applies:
    - [p] is the pattern which matches a tuple [li];
    - [t_struct] is the type structure of [t];
    - [t_struct] is not a tuple type;
    - an error "Conflicting Types" is raised. 

    {4 Examples}

{2
Typing of Blocks
}

  {3 TypingRule.Block}
    
    {4 Rule}
    [annotate_block env return_type s] is the result of annotating the
    statement [s] in [env].

    {4 Comments}
    A local identifier declared with var, let or constant is in scope
from the point immediately after its declaration until the end of the
immediately enclosing block.

    From that follows that we can discard the environment at the end of
an enclosing block.
    
    {4 Examples}

    [@asl{
    func main () => integer
    begin
      if UNKNOWN: boolean then
         let i = 3;
         print (i);
      end
      let i = "Some text";
      print (i);
      return 0;
    end
    }]

{2
Typing of Catchers
}
  
  {3 TypingRule.CatcherNone}
  [annotate_catchers env return_type (name_opt, ty, stmt)] is [(name_opt, ty,
  new_stmt)] and one of the following applies:
 
    {4 Rule}
    All of the following applies:
    - [ty] has the structure of an exception type;
    - [name_opt] gives no name;
    - [env'] is [env];
    - [new_stmt] is the result of annotating [stmt] in [env'] with [return_type].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_SDJK.

    {4 Examples}


  {3 TypingRule.CatcherSome}

    {4 Rule}
    All of the following applies:
     - [ty] has the structure of an exception type;
    - [name_opt] gives a name [name];
    - [name] is not already declared in [env];
    - [name] is annotated with [ty] in [env];
    - [env'] is [env] modified to have [name] locally declared as immutable of type [ty];
    - [new_stmt] is the result of annotating [stmt] in [env'] with [return_type].

    {4 Comments}
    This encompasses LRM Section 7.4.3 R_SDJK.

    {4 Examples}


{2
Typing of Function Calls
}
[annotate_call loc en name args eqs call_type] annotates the call to function
[name] with arguments [args] and parameters [eqs]. Formally, [annotate_call loc
en name args eqs call_type] is [(name1, args, eqs2, ret_ty1)] or an error is
raised and one of the following applies:

  {3 TypingRule.FCallBadArity}

    {4 Rule}
    All of the following applies:
    - [caller_arg_types, args1] is the result of annotating [args] in [env];
    - [name] is bound in [env] to a function with a unique name [name1]
      whose argument types [callee_arg_types] type-clash
      [caller_arg_types] and whose return type is [ret_ty];
    - [eqs1] is the list made of both [eqs] and [extra_nargs];
    - the lists [callee_arg_types] and [args1] do not have the same length;
    - an error "Bad Arity" is raised.

    {4 Examples}

  {3 TypingRule.FCallGetter}

    {4 Rule}
    All of the following applies:
    - [caller_arg_types, arg1] is the result of annotating [args] in [env];
    - [name] is bound in [env] to a function with argument types
      [callee_arg_types];
    - [eqs2] is [eqs1] modified to add all the type equations from the
      type-clash of [caller_arg_types] and [callee_arg_types];
    - [call_type] is a either a function or a getter type;
    - [ret_ty1] is the result of renaming [ty] in [eqs2].

    {4 Examples}

  {3 TypingRule.FCallSetter}

    {4 Rule}
    All of the following applies:
    - [caller_arg_types, arg1] is the result of annotating [args] in [env];
    - [name] is bound in [env] to a function with a unique name [name1] whose argument types [callee_arg_types] type-clash [caller_arg_types] and whose return type is [ret_ty];
    - [eqs1] is the list made of both [eqs] and [extra_nargs];
    - [eqs2] is ;
    - [call_type] is a setter or procedure type;
    - [ret_ty] is None;
    - [ret_ty1] is None.

    {4 Examples}

  {3 TypingRule.FCallMismatch}

    {4 Rule}
    All of the following applies:
    - [caller_arg_types, arg1] is the result of annotating [args] in [env];
    - [extra_nargs, name1, callee_arg_types, ret_ty] is the result of trying to
      find the name [name] with [caller_arg_types] in [env];
    - [eqs1] is the list made of both [eqs] and [extra_nargs];
    - [eqs2] is ;
    - [call_type] is not a function, getter, setter or procedure type;
    - an error "Mismatched Return Value" is raised.

    {4 Examples}

{2
Typing of Functions
}
[annotate_func loc env f] annotates the function named [f] and returns [f],
[new_body] and [name].

{3 TypingRule.Func}

  {4 Rule}
  All of the following applies:
  - [env1] is [env] modified to have an empty local environment;
  - [env2] is [env1] with every formal argument declared as immutable with its type;
  - [env3] is [env2] modified to add explicit parameters;
  - [env4] is [env3] modified to resolve dependently typed identifiers in the arguments;
  - [env5] is [env4] modified to resolve dependently typed identifiers in the result type;
  - [body] is the body given by [f];
  - [new_body] is the result of annotating [body] in [env5];
  - [name] is the name [f] as found in [env5].

  {4 Examples}

