"patched first reading of the HSA documentation, SC orders version, restricted scopes for SC"

(* This is the model described in the document, restricted scope instance
   version. *)

include "hsa-lib.cat"

(*************)
(* Coherence *)
(*************)

let makeCoL(s) = linearisations(s,co0)
with co from cross (map makeCoL (partition W))

let fr = rf^-1 ; co
let coh = (fr|rf|co)+


// useless (included in HhbCohCons)
// call consistent(coh,po) as CohCons

empty rmw & (fr;co) as RmwCons

(*****************************)
(* No values out of thin air *)
(*****************************)

(* gdo aka no value out of thin-air *)
let ldo = addr | data | ctrl
let gdo = rfe | ldo
//let gdo = coh | ldo

acyclic gdo as GdoCons

(*******************************)
(* Heterogenous happens before *)
(*******************************)

let acq-rel =
  ((W & Release) * (R & Acquire)) & coh
| ((F & Release) * Acquire) &
  ((po & (_ * W)); coh; (po? & (R * _)))
| (Release * (F & Acquire)) &
  ((po? & (_ * W)); coh; (po & (R * _)))

let sso s = same-instance(s) & acq-rel

let hhb = (po | union-scopes sso)+

irreflexive hhb as HhbCons
call consistent (hhb,coh) as HhbCohCons

(* Generate actual total SC orders for each dynamic scope instance.
   In practice we generate one set of relations per scope level,
   using the cross function. Each relation in such a set is the union
   of orders on all dynamic scope instances at this level.
   The dynamic scope instances are the equivalence classes of their level,
   as computed by the new primitive classes, which takes an equivalence
   relation as argument and returns the set of its equivalence classes *)

(* SC orders operate on synchronizing operations in scope instances *)
let sync-instances(lvl) =
  classes ((Synchronizing * Synchronizing) & same-instance(lvl))

(* For any scope instance S, X -po-> Y = X -SC_S-> Y *)
let preSC = po
let makeSCinstance(S) = linearisations(S,preSC)

(* All combinations of all orders for a given scope level *)
let makeSCscope(lvl) = cross (map makeSCinstance (sync-instances(lvl)))

(* Generate and check for all scope levels, unrolled  *)
with SWI from makeSCscope('wi)
call consistent(SWI,coh) as ScCohCons
call consistent(SWI,hhb) as ScHhbCons
with SWAVE from makeSCscope('wave)
call consistent(SWAVE,coh) as ScCohCons
call consistent(SWAVE,hhb) as ScHhbCons
with SWG from makeSCscope('wg)
call consistent(SWG,coh) as ScCohCons
call consistent(SWG,hhb) as ScHhbCons
with SAGENT from makeSCscope('agent)
call consistent(SAGENT,coh) as ScCohCons
call consistent(SAGENT,hhb) as ScHhbCons
with SSYSTEM from makeSCscope('system)
call consistent(SSYSTEM,coh) as ScCohCons
call consistent(SSYSTEM,hhb) as ScHhbCons

(* Check consistency of SC orders (useless ??) *)
call consistent(SWI,SWAVE) as ScSc
call consistent(SWI,SWG) as ScSc
call consistent(SWI,SAGENT) as ScSc
call consistent(SWI,SSYSTEM) as ScSc
call consistent(SWAVE,SWG) as ScSc
call consistent(SWAVE,SAGENT) as ScSc
call consistent(SWAVE,SSYSTEM) as ScSc
call consistent(SWG,SAGENT) as ScSc
call consistent(SWG,SSYSTEM) as ScSc
call consistent(SAGENT,SSYSTEM) as ScSc

include "hsa-race.cat"
