"patched first reading of the HSA documentation, SC orders version"


include "cross.cat"

procedure consistent(a, b) =
  irreflexive a;b
end

(* Coh, I keep useful checks only,
   given that coh is a total order that extends po *)

with coh from generate_orders(M,co0)

call consistent(coh,po) as CohCons

procedure equal(r1,r2) =
  empty (r1 \ r2) | (r2 \ r1)
end

procedure value-of-a-load() =
  let coh-loc = coh & loc
  let coh-locWR = coh-loc & (W * R)
  let coh-locWW = coh-loc & (W * W)
  let min-coh-locWR = coh-locWR \ (coh-locWW; coh-locWR)
  call equal(rf, min-coh-locWR)
end

call value-of-a-load() as LoadCons
empty rmwid & (coh;coh) as AtomCons


(* gdo aka no value out of thin-air *)
let ldo = addr | data | ctrl
//let gdo = (coh | ldo)+
let gdo = (rfe | ldo)+ // Definitely a shortcomming of initial model
irreflexive gdo as GdoCons

(* happens before *)
let sso s =
  same-instance(s) &
(  ((Atomic & (W | RMW) & Release) * (Atomic & (R | RMW) & Acquire)) &
  (coh & loc)
| ((F & Release) * (Synchronizing & Acquire)) &
  (po & (_ * (W | RMW));(coh & loc); po? & ((R | RMW) * _))
| (Synchronizing & Release) * (F & Acquire) &
  (po? & (_ * (W | RMW));(coh & loc); po & ((R | RMW) * _))
 )

let hhb = (po | union-scopes sso)+

irreflexive hhb as HhbCons
call consistent (hhb,coh) as HhbCohCons

(* Generate actual total SC orders for each dynamic scope instance.
   In practice we generate one set of relations per scope level,
   using the cross function. Each relation in such a set is the union
   of orders on all dynamic scope instances at this level.
   The dynamic scope instances are the equivalence classes of their level,
   as computed by the new primitive classes, which takes an equivalence
   relation as argument and returns the set of its equivalence classes *)

let sync-same-instance(s) = (Synchronizing * Synchronizing) & same-instance(s)
let gen(s) =  cross (co_locs(po,classes(sync-same-instance(s))))

procedure ok(s1,e2) = empty 0 end
(* Generate and check for all scope levels, unrolled  *)
with SWI from gen('wi)
call consistent(SWI,coh) as ScCohCons
call consistent(SWI,hhb) as ScHhbCons
with SWAVE from gen('wave)
call consistent(SWAVE,coh) as ScCohCons
call consistent(SWAVE,hhb) as ScHhbCons
with SWG from gen('wg)
call consistent(SWG,coh) as ScCohCons
call consistent(SWG,hhb) as ScHhbCons
with SAGENT from gen('agent)
call consistent(SAGENT,coh) as ScCohCons
call consistent(SAGENT,hhb) as ScHhbCons
with SSYSTEM from gen('system)
call consistent(SSYSTEM,coh) as ScCohCons
call consistent(SSYSTEM,hhb) as ScHhbCons

(* Check consistency of S orders (useless ??) *)
call consistent(SWI,SWAVE) as ScSc
call consistent(SWI,SWG) as ScSc
call consistent(SWI,SAGENT) as ScSc
call consistent(SWI,SSYSTEM) as ScSc
call consistent(SWAVE,SWG) as ScSc
call consistent(SWAVE,SAGENT) as ScSc
call consistent(SWAVE,SSYSTEM) as ScSc
call consistent(SWG,SAGENT) as ScSc
call consistent(SWG,SSYSTEM) as ScSc
call consistent(SAGENT,SSYSTEM) as ScSc

(* Races *)
let at-least-one a = (a*_| _*a)

let ordinary-conflict =
  loc & (at-least-one W) & (at-least-one Ordinary)

let special-conflict =
  let r = (Special * Special) & loc & (at-least-one (W|RMW)) in
  r \ Match

let hsa-race =
   ((ordinary-conflict | special-conflict) & ext & ~(hhb | hhb^-1)) \
   (id | (I * M) | (M * I))

procedure race-free() =
  flag ~empty hsa-race as undefined
end

call race-free()
