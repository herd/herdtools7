"our proposed HSA model"

include "cos.cat"

procedure consistent(a, b) =
  irreflexive a;b
end

let com = fr | rf | co
let coh = (po-loc | com)+
procedure coh_consistent() =
  acyclic coh as CohCons
end

let ldo = addr | data | ctrl
let gdo = (rfe | ldo)+
procedure gdo_consistent() =
  acyclic gdo as GdoCons
end

(* added \id because the definition of same-instance now includes
   identity, as it is more logical (an event is in the same dynamic scope
   as itself *)
let sc s =
  (Synchronizing * Synchronizing) & ((po | com)+ \ id) & same-instance s

procedure sc_consistent(s) =
  forall s' in scopes do
    call consistent(sc(s),sc(s')) as ScSc
  end
  acyclic sc(s) as ScCons
end

let po-rel =
    id & (Release*Release)
  | po & ((F & Release) * M)
let acq-po =
    id & (Acquire*Acquire)
  | po & (M * (F & Acquire))

let rf-at = rf & (Atomic * Atomic)
let sso s = same-instance(s) & (po-rel;rf-at;acq-po)
let hhb = (po | union-scopes sso)+
procedure hhb_consistent() =
  acyclic hhb as HhbCons
end

procedure valid(s) =
  call coh_consistent()
  call gdo_consistent()
  call sc_consistent(s)
  call hhb_consistent()
  empty rmw & (fre;coe) as atom
end

let at-least-one a = (a*_| _*a)
let conflict k =
  let r = loc & (at-least-one (W|RMW)) & (at-least-one k) & ext
  in
  r \ ((I * M) | (M * I)) \ Match
(*jade: j'ai enleve \ id, qui est implique par & ext*)

let hsa-race = conflict(Ordinary|Special) & ~(hhb | hhb^-1)

procedure race-free() =
  flag ~empty hsa-race as undefined
end

procedure hsa-execution() =
  forall s in scopes do
    call valid(s)
  end
  call race-free()
end

call hsa-execution()
