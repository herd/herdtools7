"HSA cat"

include "hsa-lib.cat"

(* Coherence *)
let makeCohL(s) = linearisations(s,co0)
let allCohL = map makeCohL (partition M)
with coh from cross allCohL
call consistent(coh,po) as CohPoCons

let cohWR = coh & (W * R)
let cohWW = coh & (W * W)
let mincohWR = cohWR \ (cohWW; cohWR)
call equals(rf,mincohWR) as LoadCons

let cohRW = coh & (R * W)
empty rmw & (cohRW;cohWW) as RmwCons

(* No thin air *)
let ldo = addr | data | ctrl
let gdo = coh | ldo
acyclic gdo as GdoCons

(* Heterogenous happens before *)
let Release = Screl | Scar
let Acquire = Scacq | Scar
let Synchronizing = Acquire | Release

let acq-rel =
  ((W & Release) * (R & Acquire)) & coh
| ((F & Release) * Acquire) &
  ((po & (_ * W)); coh; (po? & (R * _)))
| (Release * (F & Acquire)) &
  ((po? & (_ * W)); coh; (po & (R * _)))

let sso s = same-instance(s) & acq-rel
let union-scopes f = fold (fun (s,y) -> f s | y) (scopes,{})
let hhb = (po | union-scopes sso)+
irreflexive hhb as HhbCons
call consistent (hhb,coh) as HhbCohCons

(* SC orders *)
let sync-instances(tag) =
  classes ((Synchronizing * Synchronizing) & same-instance(tag))

let preSC = po
let makeSCinstance(S) = linearisations(S,preSC)

let makeSCscope(lvl) = cross (map makeSCinstance (sync-instances(lvl)))

with SWI from makeSCscope('wi)
call consistent(SWI,coh) as ScCohCons
call consistent(SWI,hhb) as ScHhbCons
with SWAVE from makeSCscope('wave)
call consistent(SWAVE,coh) as ScCohCons
call consistent(SWAVE,hhb) as ScHhbCons
with SWG from makeSCscope('wg)
call consistent(SWG,coh) as ScCohCons
call consistent(SWG,hhb) as ScHhbCons
with SAGENT from makeSCscope('agent)
call consistent(SAGENT,coh) as ScCohCons
call consistent(SAGENT,hhb) as ScHhbCons
with SSYSTEM from makeSCscope('system)
call consistent(SSYSTEM,coh) as ScCohCons
call consistent(SSYSTEM,hhb) as ScHhbCons

call consistent(SWI,SWAVE) as ScSc
call consistent(SWI,SWG) as ScSc
call consistent(SWI,SAGENT) as ScSc
call consistent(SWI,SSYSTEM) as ScSc
call consistent(SWAVE,SWG) as ScSc
call consistent(SWAVE,SAGENT) as ScSc
call consistent(SWAVE,SSYSTEM) as ScSc
call consistent(SWG,SAGENT) as ScSc
call consistent(SWG,SSYSTEM) as ScSc
call consistent(SAGENT,SSYSTEM) as ScSc

(* Races *)
let at-least-one a = (a*_| _*a)

let ordinary-conflicts =
  loc & at-least-one(W) & at-least-one(Ordinary)

let matches = union-scopes same-instance

let special-conflicts =
  (loc & (Atomic * Atomic) & at-least-one(W)) \ matches

let conflicts =
  ((ordinary-conflicts|special-conflicts) & ext) \ at-least-one(IW)

let hsa-race = conflicts \ (hhb | hhb^-1)

flag ~empty hsa-race as undefined
