"Utilities for HSA models"

(* Checks *)

procedure consistent(a, b) =
  irreflexive a;b
end

procedure includes(a,b) = empty b \ a end

procedure equals(a,b) =
  call includes(a,b)
  call includes(b,a)
end

procedure compatible(a,b) =
  acyclic a|b
end

(* Functions *)

let fold f =
  let rec fold_rec (es,y) = match es with
  || {} -> y
  || e ++ es -> fold_rec (es,f (e,y))
  end in
  fold_rec

let map f = fun es -> fold (fun (e,y) -> f e ++ y) (es,{})

let rec cross ess = match ess with
  || {} -> { 0 }
  || es ++ ess ->
      let yss = cross ess in
      fold
        (fun (e,r) -> map (fun ys -> e | ys) yss | r)
        (es,{})
   end
