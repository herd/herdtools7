"ARM"

include "cross.cat"
with co from generate_cos(co0)
let coe = co & ext
let fr = rf^-1;co
let fre = fr & ext
let com = rf | co | fr
acyclic po-loc | com as sc-per-location

let dp = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)

let ii0 = dp | rfi | rdw
let ic0 = 0
let ci0 = ctrlcfence(ctrl,ISB) | detour
let cc0 = dp | ctrl | (addr;po)

let rec ii = ii0 | ci | (ic;ci) | (ii;ii)
and ic = ic0 | ii | cc | (ic;cc) | (ii;ic)
and ci = ci0 | (ci;ii) | (cc;ci)
and cc = cc0 | ci | (ci;ic) | (cc;cc)

let ppo = ii & R*R | ic & R*W

let dmb.st = fencerel(DMB.ST) & W*W
let dsb.st = fencerel(DSB.ST) & W*W
let dmb = fencerel(DMB)
let dsb = fencerel(DSB)
let dmb.st= dmb.st & W*W
let dsb.st= dsb.st & W*W
let fences = dmb|dsb|dmb.st|dsb.st

let hb = ppo | fences | rfe
acyclic hb as no-thin-air

let light f = (f | rfe;f);hb*
let prop = (light(fences);(rfe^-1)*) & W*W

irreflexive co;prop as observation
acyclic co;prop as propagation
