"Basic relation for the Linux model"

let deps = addr | data
let deref-po-deps = (deref-po & deps)
let lderef-po-deps = (lderef-po & deps)
let rb-fence = (fencerel(F & Rb_dep) & deps)
let ctrl-po-deps = (* ctrl-po & *) (R * W) & ctrl (* Luc no Ctrl annotation ? *)
let proper-deps =   rb-fence | deref-po-deps
(* Luc: re-introduced  deref-po-deps |  lderef-po-deps *)
                  | lderef-po-deps | ctrl-po-deps | deps & (R * W)
let local = proper-deps | mb | po-rel | acq-po
let non-transitive = rfe?;local

let pairs = ((po?;(rfe & (Release * Acquire));po?) |
            (po?;(rfe & ((Assign|Release) * Deref));deref-po-deps?) |
            (po?;(rfe & (Release * Lderef));lderef-po-deps?))+

(* Sais meme plus ce que c'est
            (po?;(rfe & (Ctrl * M)); ctrl-po-deps))+
*)

let transitive-fences(extra) = (mb | sync | extra)
let transitive(extra) = (rfe?;transitive-fences(extra) | rfe?;pairs)+
let trans = transitive(0)
