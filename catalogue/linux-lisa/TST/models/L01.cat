"Linux model, experimental"
(* L01 with transitive HB *)

include "cos.cat"

let po-loc = po & loc
let com = rf | co | fr

procedure sc-per-location() =
  let order = (po-loc | com)
  acyclic order
end

include "basic-rels.cat"

(*
let hb = (non-transitive | transitive(0));non-transitive?
*)

let propbase = transitive(0)
let hb = (non-transitive | propbase)+


procedure causality() =
  irreflexive hb as cau
end


let really-local = (local | rmb | wmb) & ((M * M) \ (W * R))

procedure observation() =
  let lastcom = coe|fre
  irreflexive really-local;(rfe|coe);really-local;lastcom as loc
  irreflexive trans;hb?;lastcom as obs
end

let prop(extra) = transitive(extra);non-transitive?
let propA = (*need mb to forbid both 2+2W and R*)
            prop(0)
let propB = (*need wmb to forbid 2+2W and mb to forbid R*)
            prop(wmb)
(*let propC = need wmb to forbid both 2+2W and R, i.e. decrete Power broken*)
procedure propagation(prop) =
  acyclic co | prop as pro
end


(* Relates every lock to its matching unlock, *)

(* Convenient *)
let LU = Lock|Unlock

(*  Warning: assumes non-nested read-side critical sections *)
let crit =
  (Lock * Unlock) & po \  ((Lock * LU) & po ; po)

(* Read-side critical sections as an equivalence relation *)
let op = po^-1


(* From closest lock to mem *)
let lm =
  (Lock * M) & po \
  ((Lock * LU) & po ; (LU * M)  & po)
let ml = lm^-1

(* From mem to unlock *)

let mu =
  (M * Unlock) & po \
  ((M * LU) & po ; (LU * Unlock)  & po)
let um = mu^-1

let same-rs-cs =
  let r1 = ((M * Lock) & op) ; crit ; ((Unlock * M) & op) in
  let r2 = r1^-1 in
  r1 & r2

(* Start is before End *)
let Start-Sync = Start & Sync
let End-Sync = End & Sync
let F-Sync = F & Sync

let po-succ = po \ (po;po)

let se = (Start-Sync * End-Sync) & po-succ

(* From end of rs-cs to end of grace period *)
let ue0  = um ; com+ ; (_ * End-Sync) & po

(* Bonus: unlock that are po-before also ordered *)
(* ---> implied fence for those unlock *)

(* 4. and 4. only
let ue = (po & (Unlock * _)) ? ; ue0
*)

(* Generalized implem *)
let ue = po ? ; ue0

(* From start of grace period to start of rs-cs *)
let sl0 = (Start-Sync * _) & po ; com+  ; ml

(* Restricted
let sl = sl0 ; (po & (_ * Lock)) ?
*)
(* Generalized *)
let sl = sl0 ; po ?


(*LUC
(* From end of grace period to end of rs-cs *)
let eu = (End-Sync * _) & po ; com+  ; mu
*)

(* Ordered grace period *)
let es = (End-Sync * Start-Sync) & (po | (po;(com+;(mb;com+)*);po))

(*
let grace = (crit | se | es | sl | ue)+
*)

let ms = (M * Start-Sync) & po
let em = (End-Sync * M) & po
let grace0 = (crit |se | es | sl | ue | mu | lm | ms | em)+

(* A-cumulativity *)
let plusA(r) =
     (um ; com+ ; (_ * Start-Sync) & r ; se)
(* B-cumulativity should see with OTA *)
let plusB(r) = se ; (End-Sync * _) & r ; (((hb|r)+; rfe?)|(com+;mb;com+)) ; ml
let rec grace = grace0 | grace | plusB(grace) | plusA(grace)

let rB = plusB(grace0)
and rA = plusA(grace0)

(*
let SL = grace & (Start-Sync * Lock)
and UE = grace & (Unlock * End-Sync)

let ImpliedSL = range SL
let ImpliedUE = domain UE

let MoreMB = ImpliedSL | ImpliedUE | Start-Sync
let more-mb = M*M & fencerel(MoreMB)
let mb = mb | more-mb
show mb
*)

(*
let grace-hb = (mu|po & (M * Sync));grace;(lm|po & (Sync*M))
*)

(* propbase A-cumul *)
let Aprop(r) = com* ; propbase*; r
let A = Aprop(mb)
let Bprop(r) = r;hb?


procedure restoring-sc() =
(*  acyclic mb | com as sc *)
(*  irreflexive grace as grace *)
(*  acyclic mb|grace|com as sc (* too strong ??? *) *)
(* with more A-cumulativity *)
    acyclic Aprop(Bprop(mb|grace)) as sc
end

procedure memory_barriers() =
  call sc-per-location()
  call causality()
  call observation()
  call propagation(propA)
  call restoring-sc()
end

call memory_barriers()
