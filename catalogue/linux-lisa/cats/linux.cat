"Linux model"

include "cos.cat"

let po-loc = po & loc
let com = rf | co | fr

procedure sc-per-location() =
  let order = (po-loc | com)
  acyclic order
end

let deps = addr | data
let deref-po-deps = (deref-po & deps)
let lderef-po-deps = (lderef-po & deps)
let rb-fence = (fencerel(F & Rb_dep) & deps)
let ctrl-po-deps = (ctrl-po & ctrl)
let proper-deps =   rb-fence (*| deref-po-deps
                  | lderef-po-deps*) | ctrl-po-deps
let local = proper-deps | fences
let non-transitive = rfe?;local

let pairs = ((po?;(rfe & (Release * Acquire));po?) |
            (po?;(rfe & (Assign * Deref));deref-po-deps) |
            (po?;(rfe & (Release * Lderef));lderef-po-deps) |
            (po?;(rfe & (Ctrl * M)); ctrl-po-deps))+

let transitive-fences(extra) = (mb | sync | extra)
let transitive(extra) = (rfe?;transitive-fences(extra) | rfe?;pairs)+

let hb = (non-transitive | transitive(0));non-transitive?

procedure causality() =
  irreflexive hb
end

procedure observation() =
  irreflexive fre;hb
end

let prop(extra) = transitive(extra);non-transitive?
let propA = (*need mb to forbid both 2+2W and R*)
            prop(0)
let propB = (*need wmb to forbid 2+2W and mb to forbid R*)
            prop(wmb)
(*let propC = need wmb to forbid both 2+2W and R, i.e. decrete Power broken*)
procedure propagation(prop) =
  acyclic co | prop
end

let between = range(lock-po) & domain(po-unlock)
let sandwich = (po | po^-1) & between*between
let grace = (sync;com+)+;(sandwich;com+)+

procedure restoring-sc() =
  acyclic mb | com
  acyclic grace as grace
end

procedure memory_barriers() =
  call sc-per-location()
  call causality()
  call observation()
  call propagation(propA)
  call restoring-sc()
end

call memory_barriers()
