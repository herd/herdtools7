"ARM redux (equivalent to ARM)"

include "arm-common.cat"

let com = rf | co | fr
acyclic po-loc | com as sc-per-location

let dp = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)

let ii0 = dp | rfi | rdw
let ic0 = 0
let ci0 = ctrlisb | detour
let cc0 = dp | ctrl | (addr;po)

let rec ii = ii0 | ci | (ic;ci) | (ii;ii)
and ic = ic0 | ii | cc | (ic;cc) | (ii;ic)
and ci = ci0 | (ci;ii) | (cc;ci)
and cc = cc0 | ci | (ci;ic) | (cc;cc)

let ppo = ii & R*R | ic & R*W

let fence = dmb|dsb|dmb.st|dsb.st

let hb = ppo | fence | rfe
acyclic hb as no-thin-air

let prop = com*; fence; hb*
acyclic prop as propagation
