"V8 proposal"

include "arm-common-v8.cat"

let com = rf | co | fr

let dp = addr | data
let rdw = po-loc & (fre;rfe)
let detour = po-loc & (coe ; rfe)

let ii0 = dp | rfi | rdw
let ic0 = 0
let ci0 = ctrlisb | detour
let cc0 = dp | ctrl | (addr;po)

let rec ii = ii0 | ci | (ic;ci) | (ii;ii)
and ic = ic0 | ii | cc | (ic;cc) | (ii;ic)
and ci = ci0 | (ci;ii) | (cc;ci)
and cc = cc0 | ci | (ci;ic) | (cc;cc)

let Acq = A
let Rel = L
let acq-po = (Acq * M) & po
let po-rel = (M * Rel) & po

let ppo = ii & R*R | ic & R*W | acq-po

let all-dmb = dmb.sy|dmb.st|dmb.ld
let all-dsb = dsb.sy|dsb.st|dsb.ld
let strong-fence = all-dmb | all-dsb
let weak-fence = po-rel
let fence = strong-fence | weak-fence
let A-cumul = rfe;fence

let hb = ppo | (R * M) & fence | rfe

let prop = ((fence | A-cumul);hb*) & W*W

let xx = (W*W) & (X *X) & po (* NB: W only *)

let car = com & (Acq|Rel) * (Acq|Rel)
let poar = po & (Acq|Rel) * (Acq|Rel)

procedure sc-per-location() =
  acyclic po-loc | com
end

procedure atomic() =
  empty rmw & (fre;coe)
end

procedure no-thin-air() =
  acyclic hb
end

procedure observation() =
  irreflexive fre;prop;hb*
end

procedure propagation() =
  acyclic co | prop
end

procedure restoring-sc() =
  acyclic co | xx (* or acyclic com | xx *) as ScXX
  acyclic ((com*;strong-fence)|car|(rfe?;weak-fence));hb* | poar
end

procedure arm() =
  call sc-per-location()
  call atomic()
  call no-thin-air()
  call observation()
  call propagation()
  call restoring-sc()
end

call arm()
