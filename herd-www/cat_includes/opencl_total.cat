"OpenCL"
withsc

include "opencl_base.cat"

(* BEGIN TOTAL SC STUFF *)

let S = S & ifexists(mo_sc & !s_all)
let S1 = S & ~(co; S)
irreflexive (S ; scp) | (S1 ; sc6) as S_consistent

(* END TOTAL SC STUFF *)

(*********)
(* Races *)
(*********)

let conflict = ((W * _) | (_ * W)) & loc

(* Data races *)
let dr = conflict & ~symm(ghb | lhb) & ~incl
undefined_unless empty dr as data_race
show dr

(* Unsequenced races *)
let ur = (wi & conflict & ~symm(po)) \ id
undefined_unless empty ur as unsequenced_race
show ur

(* Barrier divergence *)
let bd = [entry_fence] & ((~wi & wg & ~(bar_sw(G) | bar_sw(L))); unv)
undefined_unless empty bd as barrier_divergence
show bd
