"C++11" withinit

(* MB: This file includes a version of the C/C++11 memory model. It
   follows the Lem model, but differs in some details. The main one is
   initialisation: in C/C++11, one can introduce undefined behaviour
   by reading from an uninitialised variable. In Herd, all-location
   intialisation is built in. That simplifies some of the model
   somewhat. The treatment of thin air values is another
   difference. In C/C++11, the rules that forbid thin-air values in
   executions are broken, so my model leaves such restrictions
   out. Here, there is a question of whether we should follow that
   approach, or forbid thin air in the ususal Herd way. Finally,
   program order is total in Herd, whereas sb can be partial in the
   Lem model.

   This file is still work in progress. Where possible, restrictions
   are expressed in a way that is natural for Herd. This can look
   quite different to the Lem definitions that make up the C/C++11
   model. Throughout the file, definitions carry comments that name
   the definitons of the Lem model that most closely relate.

  LM: adapt to herd7
*)


(* SC atomics have acquire and release semantics. *)

let CACQ = ACQ | (SC & (R | F)) | ACQ_REL | (F & CON)
let CREL = REL | (SC & (W | F)) | ACQ_REL
let CCON = R & CON
(* Mutex actions *)
let MTX = LK | UL


let asw = I * (M \ I)

let dd = (data | addr)+

(* Id relations *)
let P = M\A
let fence_id = toid(F)
let rmw_id = toid(RMW)
let w_id = toid(W)
let r_id = toid(R)
let sc_id = toid(SC)
let cacq_id = toid(CACQ)
let crel_id = toid(CREL)
let ccon_id = toid(CCON)
let a_id = toid(A)
let na_id = toid(P)
let lk_id = toid(LK)
let ls_id = toid(LS)
let ul_id = toid(UL)

let idf = (po; fence_id)?
let fid = (fence_id; po)?

(* From now, we need coherence orders *)
include "cos.cat"

(* And lo (lock order), enforce no constraint.. *)
with lo from generate_orders(MTX,0)

let rs =
  crel_id ; fid; toid(A & W);
  (((co ; rmw_id) | coi) & ~(coe ; toid(W \ RMW) ; co))?
let swra = ext & (rs; rf; a_id; idf; cacq_id)
let swul = ext & (ul_id; lo; lk_id)
let sw = asw | swul | swra
let pp_asw = asw \ (asw;po)
let pp_sw = pp_asw | swul | swra
show pp_sw as sw

(* C: no_consume_hb *)
(* simple_hb applies to the programs that don't have consumes *)
(*let simple_hb = (po | sw)+*)


(* C: with_consume_cad_set, dependency_ordered_before

   Note that the consume memory order does not support fence-style
   synchronisation.
*)
let cad = ((rf & po) | dd)+
let dob = (ext & (w_id; rs; rf; ccon_id)); cad?


(* C: happens_before, inter_thread_happens_before, consistent_hb *)
let ithbr = sw | dob | sw;po
let ithb = (ithbr | po;ithbr)+
let hb = po | ithb
show dob
acyclic hb as hbAcyclic




(* C: coherent_memory_use *)
(* Uniproc/Coherence check *)
let hbl = hb & loc
let pol = po-loc


let corr = fr;rf;hbl
let corw = co;rf;hbl
let cowr = fr;hbl
let coww = co;hbl


irreflexive (corr | cowr | corw | coww) as coherence

let rmwv = rf;rmw_id | (co;fr) | (co;rf)

irreflexive rmwv as rmwAtomicity



(* C: visible_side_effect_set *)

let vse = w_id;hbl;r_id \ (hbl; w_id; hbl)
(*show vse*)

(* C: consistent_non_atomic_rf -- must read from vse: *)
let narf = rf; na_id

(* narf included in vse *)
empty narf \ vse as nonAtomicRfConsistent


(* C: det_read

   We assume there are initialisation writes at every location. That
   means we don't need a det-read style restriction.
*)


(* C: consistent_atomic_rf -- acyclicity of hb union rf for atomic reads: *)
let arf = rf; a_id

let hbarf = hb;arf
irreflexive hbarf as atomicRfConsistent

(*jade: arf and hbarf are funky names =)*)

(* C: rmw_atomicity
   This condition ensures that RMW actions read the immediately
   preceding action in modification order. If they read an earlier one
   it would violate "irreflexive (fr;co)", if they read a later one,
   it would violate "irreflexive (rf;co)". In either case, these
   restrictions only apply to RMW's because no other action both reads
   and writes

let rmwrf = rf; rmw_id
let comax = (co; rm_id) \ (co;co)

(*I want to say: equal rmwrf comax*)
let rmwv = rmwrf\comax | comax\rmwrf
empty rmwv

   The restrictions I do need to impose are below. They are already
   covered by uniproc.

let rmwv = rf;co | fr;co
irreflexive rmwv
*)



(* C: sc_fenced_sc_fences_heeded, sc_accesses_sc_reads_restricted,
      sc_accesses_consistent_sc

   The definitions below mirror the Lem ones. They are what the
   restriction might look like if we had a sequentially consistent
   order to work with.

   let sc = R
   let scff = sc & ([_*fence] | [fence*_])
   let scfc = (co;     scff; po; rf') |
   (co; po; scff;     rf') |
   (co; po; scff; po; rf') |
   ( po; scff; po; co) |
   (     scff; po; co) |
   ( po; scff;     co)
   acyclic scfc

   We don't have such an order, and instead have to express the SC
   restrictions as constraints on a possible SC order. Note that SC
   order is total, so the absence of the cycles above implies an SC
   edge in the other direction for nearly complete cycles. The
   following defintion expresses the constraints on SC order for each
   unfolded cycle:

   let scf =
   ([SC & fence]; po; fr;     [SC]) |
   (        [SC];     fr; po; [SC & fence]) |
   ([SC & fence]; po; fr; po; [SC & fence]) |
   ([SC & fence]; po; co; po; [SC & fence]) |
   ([SC & fence]; po; co;     [SC]) |
   (        [SC];     co; po; [SC & fence])

   Now simplifying using fid and idf, considering just the co
   restrictions, and noting that the non-fenced SC projection of co is
   similarly restricted gives:
*)

let scco = sc_id; fid; co; idf; sc_id

(* For SC fr, the picture is more complicated. We'd like to have:

let overstrong_scfr = [SC]; fid; fr; idf; [SC]

   But that's not what C/C++11 specify. Section 29.3p3 of the released
   C++11 standard makes the relevant restriction. It's weaker than it
   might be: it's phrased in terms of hb when co would be what we'd
   like. I argued for a coherence based restriciton at the time, but
   the C++11 committee did not listen to me. Their reasoning was that
   hb was easier to think about than mo -- not a great reason. I might
   revisit this with them for C14.

   Here is the aproximation of from-reads that the SC atomics do respect:
*)

let scfence_id = sc_id & fence_id
let scw_id = sc_id & w_id
let invrf = rf^-1

let scfr =
           ( (sc_id; invrf; hbl; scw_id) |
             (sc_id; invrf; sc_id; co; sc_id) |
             (scfence_id; po; fr; sc_id) |
             (sc_id; fr; po; scfence_id) |
             (scfence_id; po; fr; po; scfence_id)
           ) \ id

(* SC atomics have to respect happens-before: *)

let schb = sc_id; hb; sc_id

(* Then the constraints on the SC order are as given below.

   The three components probably overlap, which is unfortunate. We
   should think about simplifications of this...
*)
let scp = schb | scco | scfr
acyclic scp as scConsistent
show scp



(* C: locks_only_consistent_lo *)
irreflexive lo;hb as hbAgreesLo

(* C: locks_only_consistent_locks *)
let mv = ls_id; lo^-1; ls_id; ~(lo; ul_id; lo)
irreflexive mv as consistentLo


(* C: data_races *)

let locSomeW = loc & ((W * _) | (_ * W)) (* same location, at least a W *)

let dr =
  let r1 = locSomeW & ext in (* By different threads *)
  let r2 = r1 \ (A * A)  in  (* At least one non-atomic *)
  r2 \ (hb | hb^-1)          (* unrelated by hb *)


(* C: unsequenced_races

   MB: Lem talks about location-kinds here. I believe we would like to
   avoid that in Herd, so in the proofs of equivalence, we will need
   to assume the existance of a good location-kind map.
*)

let ur =
  let r1 = locSomeW & int in    (* By the same thread *)
  let r2 = r1 \ id in           (* Different *)
  r2 \ (po | po^-1)             (* unrelated by po *)


(* C: locks_only_good_mutex_use, locks_only_bad_mutexes *)
let bl = (ls_id; (po & lo); lk_id) \ (lo; ul_id; lo)

(* This seems to say the right thing, but it is a bit complicated! *)
let lopowoul = (po & lo) \ (lo; ul_id; lo)
let lu = ul_id \ (ul_id; lopowoul^-1; ls_id; lopowoul; ul_id)




show dr
show ur
show bl

undefined_unless empty dr as dataRace
undefined_unless empty ur as unsequencedRace
undefined_unless empty bl as badLock
undefined_unless empty lu as badUnlock
