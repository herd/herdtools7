(*
 * The Armv8 Application Level Memory Model.
 *
 * This is a machine-readable, executable and formal artefact, which aims to be
 * the latest stable version of the Armv8 memory model.
 * If you have comments on the content of this file, please send an email to
 * memory-model@arm.com
 * For a textual version of the model, see section B2.3 of the Armv8 ARM:
 * https://developer.arm.com/documentation/ddi0487/
 *
 * Authors:
 * Will Deacon <will.deacon@arm.com>
 * Jade Alglave <jade.alglave@arm.com>
 * Nikos Nikoleris <nikos.nikoleris@arm.com>
 * Artem Khyzha <artem.khyzha@arm.com>
 *
 * Copyright (C) 2016-present, Arm Ltd.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *     * Neither the name of ARM nor the names of its contributors may be
 *       used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *)

catdep (* This option says that the cat file computes dependencies *)

include "aarch64hwreqs.cat"

(* Coherence-after *)
let ca = fr | co

(* Observed-by *)
let obs = ([M & Exp]; (rf | ca); [M & Exp]) & ext

(* TLBI-after *)
include "tlbi-after.cat"
with tlbi-after from (pte-tlbi-pairs hw-reqs)

(* TTD-read-ordered-before *)
let TTD-read-ordered-before =
  tlbi-after; [TLBI]; po; [dsb.full]; po; [~(M&Imp)]
  | (if "ETS2" then tlbi-after; [TLBI]; po; [dsb.full]; po; [M & PTE & Imp] else 0)

(* TLBI-Ordered-Before *)
let tlbi-ob =
     TTD-read-ordered-before
   | tr-ib^-1; TTD-read-ordered-before & ext
   | po-va-loc; TTD-read-ordered-before & ext

(* TLBI-Coherence-After *)
let tlbi-ca =
   [TLBI]; tlbi-after; [R & PTE & Imp]; ca; [W & PTE]

(* TLBUncacheable-Predecessor *)
let TLBuncacheable-pred =
  [range([TLBUncacheable & FAULT]; tr-ib^-1)]; ca \ intervening-write(ca); [W & PTE & Exp]

(* Hardware-Update-Predecessor *)
let HU-pred =
  [PTE]; ca \ intervening-write(ca); [HU]

(* Ordered-before *)
let rec ob =
     hw-reqs
    | [R & Exp]; po-loc; [R & Exp]; fre ; [W & Exp]; si

    | obs; si
    | rf & (((PTE & Imp) * _) | (_* (PTE & Imp)))      
    | TLBuncacheable-pred
    | HU-pred
    | [HU]; co | co; [HU]
    | tlbi-ca

    | tlbi-ob

    | ob; ob

(* External visibility requirement *)
irreflexive ob as external

(* Internal visibility requirements *)
irreflexive [R & Exp]; (po-loc | rmw); [W & Exp]; rfi; [R & Exp] as coRW1-Exp
irreflexive [W & Exp]; po-loc; [W & Exp]; (ca & int); [W & Exp] as coWW-Exp
irreflexive [W & Exp]; po-loc; [R & Exp]; (ca & int); [W & Exp] as coWR-Exp
irreflexive [W & Exp & T]; po-loc; [R & Imp & T]; (ca & int) as coWR-MTE

(* Atomic: LDXR/STXR, AMO and HU constraint to forbid intervening writes. *)
empty (rmw & (fr; co)) \ (([Exp]; rmw; [Exp]) & (fri ; [W & Exp]; coi)) as atomic

(* Break Before Make *)
let BBM = ([PTEV]; ca; [PTEINV]; co; [PTEV])
flag ~empty (PTE-update-needsBBM & ~BBM) as requires-BBM
