(*
 * SPDX-FileCopyrightText: Copyright (C) 2016-present, Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * The Armv8 Application Level Memory Model.
 *
 * This is a machine-readable, executable and formal artefact, which aims to be
 * the latest stable version of the Armv8 memory model.
 * If you have comments on the content of this file, please send an email to
 * memory-model@arm.com
 * For a textual version of the model, see section B2.3 of the Armv8 ARM:
 * https://developer.arm.com/documentation/ddi0487/
 *
 * Authors:
 * Will Deacon <will.deacon@arm.com>
 * Jade Alglave <jade.alglave@arm.com>
 * Nikos Nikoleris <nikos.nikoleris@arm.com>
 * Artem Khyzha <artem.khyzha@arm.com>
 *)

(*
 * Include default definitions for sets that are undefined without
 * -variant vmsa
*)

let PTE = if "vmsa" then PTE else emptyset
let PTEV = if "vmsa" then PTEV else emptyset
let PTEINV = if "vmsa" then PTEINV else emptyset
let inv-domain = if "vmsa" then inv-domain else 0
let AF = if "vmsa" then AF else emptyset
let DB = if "vmsa" then DB else emptyset
let MMU = if "vmsa" then MMU else emptyset
let Translation = if "vmsa" then Translation else emptyset
let AccessFlag = if "vmsa" then AccessFlag else emptyset


(*
 * Include default definitions for sets that might be undefined without
 * -variant ifetch
*)
let Instr = if "ifetch" then Instr else emptyset
let Within-CMODX-List = if "ifetch" then Restricted-CMODX else emptyset

(*
 * Include the cos.cat file shipped with herd.
 * This builds the co relation as a total order over writes to the same
 * location and then consequently defines the fr relation using co and
 * rf.
 *)
let AFtoDB = same-instance & ((AF\DB) * (DB\AF))
let co0=co0 | AFtoDB

include "cos.cat"

(*
 * A shorthand for cache maintenance effects used by -variant ifetch
 *)
let IC = IC.IALLUIS | IC.IALLU | IC.IVAU

(* Renaming default herd names *)
let Imp = NExp
let SPONTANEOUS = SPURIOUS
let inv-scope = inv-domain
let TTD = PTE
let Tag = T

(* HW TTD Updates permitted only for the AF or DB *)
let HU = Imp & TTD & W
assert empty HU \ (AF | DB)

(*
 * Include aarch64fences.cat to define barriers.
 *)
include "aarch64fences.cat"

(*
 * Include aarch64bbm.cat to define relations on Break-Before-Make semantics.
 *)
include "aarch64bbm.cat"

(* Show relations in generated diagrams *)
include "aarch64show.cat"

(* Helper functions *)
procedure included(r1, r2) =
  empty r1 \ r2
end

procedure equal(r1, r2) =
  call included(r1, r2)
  call included(r2, r1)
end

(* Intervening Effect *)
let intervening(S,r) = r; [S]; r

(* Properties of single-copy atomic accesses *)
let sca-class = [M & Exp]; sm; [M & Exp]

(* Flag any occurrence of writes to two different locations that might be on
 * the same cache line. *)
flag ~empty ((W & Instr)*(W & Instr) \ loc)
  as Assuming-no-two-modified-instructions-are-on-the-same-cache-line

(* Flag the runs of herd7 with unsupported combinations of variants *)
flag ~empty (if "vmsa" && "memtag" then _ else 0)
  as combining-vmsa-and-memtag-is-not-supported
flag ~empty (if "vmsa" && "ifetch" then _ else 0)
  as combining-vmsa-and-ifetch-is-not-supported
flag ~empty (if "memtag" && "ifetch" then _ else 0)
  as combining-memtag-and-ifetch-is-not-supported

(* Flag the runs of herd7 with work-in-progress features *)
flag ~empty (if "sve" then _ else 0)
  as Scalable-Vector-Extensions-is-work-in-progress

flag ~empty (if "sme" then _ else 0)
  as Scalable-Matrix-Extensions-is-work-in-progress

include "aarch64loc.cat"
